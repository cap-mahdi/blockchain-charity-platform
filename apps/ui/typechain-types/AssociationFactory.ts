/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AssociationFactoryInterface extends Interface {
  getFunction(nameOrSignature: "deployAssociationContract"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AssociationContractDeployed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deployAssociationContract",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployAssociationContract",
    data: BytesLike
  ): Result;
}

export namespace AssociationContractDeployedEvent {
  export type InputTuple = [
    associationContract: AddressLike,
    creator: AddressLike
  ];
  export type OutputTuple = [associationContract: string, creator: string];
  export interface OutputObject {
    associationContract: string;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AssociationFactory extends BaseContract {
  connect(runner?: ContractRunner | null): AssociationFactory;
  waitForDeployment(): Promise<this>;

  interface: AssociationFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deployAssociationContract: TypedContractMethod<
    [
      _name: string,
      _description: string,
      _email: string,
      _phoneNumber: string,
      _country: string,
      _streetAddress: string,
      _city: string,
      _state: string,
      _postalCode: string,
      _creationDate: BigNumberish,
      _size: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deployAssociationContract"
  ): TypedContractMethod<
    [
      _name: string,
      _description: string,
      _email: string,
      _phoneNumber: string,
      _country: string,
      _streetAddress: string,
      _city: string,
      _state: string,
      _postalCode: string,
      _creationDate: BigNumberish,
      _size: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  getEvent(
    key: "AssociationContractDeployed"
  ): TypedContractEvent<
    AssociationContractDeployedEvent.InputTuple,
    AssociationContractDeployedEvent.OutputTuple,
    AssociationContractDeployedEvent.OutputObject
  >;

  filters: {
    "AssociationContractDeployed(address,address)": TypedContractEvent<
      AssociationContractDeployedEvent.InputTuple,
      AssociationContractDeployedEvent.OutputTuple,
      AssociationContractDeployedEvent.OutputObject
    >;
    AssociationContractDeployed: TypedContractEvent<
      AssociationContractDeployedEvent.InputTuple,
      AssociationContractDeployedEvent.OutputTuple,
      AssociationContractDeployedEvent.OutputObject
    >;
  };
}
