/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface AssociationContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "city"
      | "country"
      | "creationDate"
      | "description"
      | "email"
      | "getAssociationDetails"
      | "name"
      | "phoneNumber"
      | "postalCode"
      | "size"
      | "state"
      | "streetAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AssociationContractDeployed"
  ): EventFragment;

  encodeFunctionData(functionFragment: "city", values?: undefined): string;
  encodeFunctionData(functionFragment: "country", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "creationDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "email", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAssociationDetails",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "phoneNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postalCode",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "size", values?: undefined): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "streetAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "city", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "country", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "creationDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "email", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssociationDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "phoneNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "postalCode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "size", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "streetAddress",
    data: BytesLike
  ): Result;
}

export namespace AssociationContractDeployedEvent {
  export type InputTuple = [
    name: string,
    description: string,
    email: string,
    phoneNumber: string,
    country: string,
    streetAddress: string,
    city: string,
    state: string,
    postalCode: string,
    creationDate: BigNumberish,
    size: BigNumberish
  ];
  export type OutputTuple = [
    name: string,
    description: string,
    email: string,
    phoneNumber: string,
    country: string,
    streetAddress: string,
    city: string,
    state: string,
    postalCode: string,
    creationDate: bigint,
    size: bigint
  ];
  export interface OutputObject {
    name: string;
    description: string;
    email: string;
    phoneNumber: string;
    country: string;
    streetAddress: string;
    city: string;
    state: string;
    postalCode: string;
    creationDate: bigint;
    size: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AssociationContract extends BaseContract {
  connect(runner?: ContractRunner | null): AssociationContract;
  waitForDeployment(): Promise<this>;

  interface: AssociationContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  city: TypedContractMethod<[], [string], "view">;

  country: TypedContractMethod<[], [string], "view">;

  creationDate: TypedContractMethod<[], [bigint], "view">;

  description: TypedContractMethod<[], [string], "view">;

  email: TypedContractMethod<[], [string], "view">;

  getAssociationDetails: TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint
      ] & {
        _name: string;
        _description: string;
        _email: string;
        _phoneNumber: string;
        _country: string;
        _streetAddress: string;
        _city: string;
        _state: string;
        _postalCode: string;
        _creationDate: bigint;
        _size: bigint;
      }
    ],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  phoneNumber: TypedContractMethod<[], [string], "view">;

  postalCode: TypedContractMethod<[], [string], "view">;

  size: TypedContractMethod<[], [bigint], "view">;

  state: TypedContractMethod<[], [string], "view">;

  streetAddress: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "city"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "country"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "creationDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "description"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "email"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAssociationDetails"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint
      ] & {
        _name: string;
        _description: string;
        _email: string;
        _phoneNumber: string;
        _country: string;
        _streetAddress: string;
        _city: string;
        _state: string;
        _postalCode: string;
        _creationDate: bigint;
        _size: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "phoneNumber"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "postalCode"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "size"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "state"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "streetAddress"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AssociationContractDeployed"
  ): TypedContractEvent<
    AssociationContractDeployedEvent.InputTuple,
    AssociationContractDeployedEvent.OutputTuple,
    AssociationContractDeployedEvent.OutputObject
  >;

  filters: {
    "AssociationContractDeployed(string,string,string,string,string,string,string,string,string,uint256,uint256)": TypedContractEvent<
      AssociationContractDeployedEvent.InputTuple,
      AssociationContractDeployedEvent.OutputTuple,
      AssociationContractDeployedEvent.OutputObject
    >;
    AssociationContractDeployed: TypedContractEvent<
      AssociationContractDeployedEvent.InputTuple,
      AssociationContractDeployedEvent.OutputTuple,
      AssociationContractDeployedEvent.OutputObject
    >;
  };
}
