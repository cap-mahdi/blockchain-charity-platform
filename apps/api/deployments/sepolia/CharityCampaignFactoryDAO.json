{
  "address": "0x85D33cF50c1C543689866573ecDB4486Cf972774",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "campaignAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "CampaignCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_targetUser",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_targetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_refundThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        }
      ],
      "name": "createCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0dd2a842ba3ecd8fcc4c8dce6fe0320f4834606929ceea0eaee29c0ecaf84f76",
  "receipt": {
    "to": null,
    "from": "0xe1578fc20E333933Fa60EFB7F300ED022fa920c4",
    "contractAddress": "0x85D33cF50c1C543689866573ecDB4486Cf972774",
    "transactionIndex": 79,
    "gasUsed": "1988799",
    "logsBloom": "0x
    "blockHash": "0x1947abafa2ee1757974c8a774285126e2e55ac9c7e78f5ceaab72ab42ce9106f",
    "transactionHash": "0x0dd2a842ba3ecd8fcc4c8dce6fe0320f4834606929ceea0eaee29c0ecaf84f76",
    "logs": [],
    "blockNumber": 6015719,
    "cumulativeGasUsed": "14682201",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "fe506b5f85513dad8aeb3439be35e180",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"campaignAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"CampaignCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_targetUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refundThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"createCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/services/blockchain/contracts/DAO/CharityCampaignFactoryDAO.sol\":\"CharityCampaignFactoryDAO\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"src/services/blockchain/contracts/DAO/CharityCampaignDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ncontract CharityCampaignDAO {\\n    struct Proposal {\\n        address proposer;\\n        uint256 votesFor;\\n        uint256 votesAgainst;\\n        bool executed;\\n        bool allowed;\\n        mapping(address => bool) voters; // Added mapping to track voters\\n    }\\n\\n    string public title;\\n    string public description;\\n    address public targetUser;\\n    uint256 public targetAmount;\\n    uint256 public totalDonations;\\n    uint256 public refundThreshold;\\n    address public owner;\\n\\n    IERC20 public tokenAddress; // The associated token contract\\n\\n    mapping(address => uint256) public donations;\\n    mapping(uint256 => Proposal) public proposals;\\n    uint256 public numProposals;\\n\\n    event DonationReceived(\\n        address indexed donor,\\n        uint256 amount,\\n        uint256 tokensIssued\\n    );\\n    event RefundProcessed(address indexed donor, uint256 amount);\\n    event ProposalCreated(uint256 proposalId, address proposer);\\n    event ProposalVoted(uint256 proposalId, address voter, bool inSupport);\\n    event ProposalExecuted(uint256 proposalId, bool allowed);\\n\\n    constructor(\\n        string memory _title,\\n        string memory _description,\\n        address _targetUser,\\n        uint256 _targetAmount,\\n        uint256 _refundThreshold,\\n        address _owner,\\n        address _tokenAddress // Address of the associated token contract\\n    ) {\\n        title = _title;\\n        description = _description;\\n        targetUser = _targetUser;\\n        targetAmount = _targetAmount;\\n        refundThreshold = _refundThreshold;\\n        owner = _owner;\\n        tokenAddress = IERC20(_tokenAddress);\\n    }\\n\\n    function donate() external payable {\\n        require(msg.value > 0, \\\"Donation amount must be greater than zero\\\");\\n\\n        // Calculate the amount of tokens to issue to the donor\\n        uint256 tokensToIssue = calculateTokens(msg.value);\\n\\n        // Issue tokens to the donor\\n        tokenAddress.transfer(msg.sender, tokensToIssue);\\n\\n        // Update donation and total donation amounts\\n        donations[msg.sender] += msg.value;\\n        totalDonations += msg.value;\\n\\n        emit DonationReceived(msg.sender, msg.value, tokensToIssue);\\n    }\\n\\n    function calculateTokens(uint256 _donationAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        require(targetAmount > 0, \\\"Target amount must be greater than zero\\\");\\n\\n        // Calculate the ratio of tokens to issue based on the donation amount and target amount\\n        // Use SafeMath to prevent integer overflow\\n        uint256 tokensToIssue = (_donationAmount * tokenAddress.totalSupply()) /\\n            targetAmount;\\n\\n        return tokensToIssue;\\n    }\\n\\n    function requestRefund() external {\\n        require(totalDonations < targetAmount, \\\"Target amount reached\\\");\\n        require(donations[msg.sender] > 0, \\\"No donations to refund\\\");\\n        require(donations[msg.sender] >= refundThreshold, \\\"Refund threshold not met\\\");\\n\\n        uint256 amountToRefund = donations[msg.sender];\\n        donations[msg.sender] = 0;\\n        totalDonations -= amountToRefund;\\n\\n        payable(msg.sender).transfer(amountToRefund);\\n\\n        emit RefundProcessed(msg.sender, amountToRefund);\\n    }\\n\\n    function createProposal() external returns (uint256) {\\n        uint256 proposalId = numProposals++;\\n        Proposal storage proposal = proposals[proposalId];\\n        proposal.proposer = msg.sender;\\n        proposal.allowed = false; // Default to not allowing funds withdrawal\\n        emit ProposalCreated(proposalId, msg.sender);\\n        return proposalId;\\n    }\\n\\n    function voteOnProposal(uint256 proposalId, bool inSupport) external {\\n        Proposal storage proposal = proposals[proposalId];\\n        require(!proposal.executed, \\\"Proposal already executed\\\");\\n        require(proposal.proposer != msg.sender, \\\"Cannot vote on own proposal\\\");\\n        require(proposal.votesFor + proposal.votesAgainst < tokenAddress.balanceOf(msg.sender), \\\"Insufficient tokens to vote\\\");\\n        require(!proposal.voters[msg.sender], \\\"Already voted\\\");\\n\\n        if (inSupport) {\\n            proposal.votesFor += tokenAddress.balanceOf(msg.sender);\\n        } else {\\n            proposal.votesAgainst += tokenAddress.balanceOf(msg.sender);\\n        }\\n        proposal.voters[msg.sender] = true;\\n\\n        emit ProposalVoted(proposalId, msg.sender, inSupport);\\n    }\\n\\n    function executeProposal(uint256 proposalId) external {\\n        Proposal storage proposal = proposals[proposalId];\\n        require(!proposal.executed, \\\"Proposal already executed\\\");\\n\\n        if (proposal.votesFor > proposal.votesAgainst) {\\n            proposal.allowed = true;\\n        }\\n\\n        proposal.executed = true;\\n\\n        emit ProposalExecuted(proposalId, proposal.allowed);\\n    }\\n\\n    function withdrawFunds() external {\\n        Proposal storage proposal = proposals[numProposals - 1]; // Latest proposal\\n        require(proposal.allowed, \\\"Funds withdrawal not allowed\\\");\\n        require(totalDonations >= targetAmount, \\\"Target amount not reached\\\");\\n        require(msg.sender == owner, \\\"Only the owner can withdraw funds\\\");\\n\\n        payable(targetUser).transfer(address(this).balance);\\n    }\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\",\"keccak256\":\"0x40b383dae20b18356b47abf54861d1127d322920efd8224aafc6aac508e76681\",\"license\":\"MIT\"},\"src/services/blockchain/contracts/DAO/CharityCampaignFactoryDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"./CharityCampaignDAO.sol\\\";\\r\\nimport \\\"./GovToken.sol\\\";\\r\\n\\r\\ncontract CharityCampaignFactoryDAO {\\r\\nevent CampaignCreated(address campaignAddress, address tokenAddress);\\r\\n\\r\\n    function createCampaign(\\r\\n        string memory _name,\\r\\n        string memory _description,\\r\\n        address _targetUser,\\r\\n        uint256 _targetAmount,\\r\\n        uint256 _refundThreshold , \\r\\n         uint256 _tokenSupply,\\r\\n        string memory _tokenName,\\r\\n        string memory _tokenSymbol // Add the token name and abbreviation parameters\\r\\n    ) external  {\\r\\n       GovToken newToken = new GovToken(_tokenSupply, _tokenName, _tokenSymbol);\\r\\n\\r\\n       \\r\\n        \\r\\n        // Deploy the campaign contract, passing the token contract address\\r\\n        CharityCampaignDAO newCampaign = new CharityCampaignDAO(\\r\\n            _name,\\r\\n            _description,\\r\\n            _targetUser,\\r\\n            _targetAmount,\\r\\n            _refundThreshold,\\r\\n            msg.sender,\\r\\n           address( newToken )\\r\\n        );\\r\\n\\r\\n               newToken.transfer(address(newCampaign), _tokenSupply);\\r\\n\\r\\n        // Transfer ownership of the token contract to the campaign contract\\r\\n        newToken.transferOwnership(address(newCampaign));\\r\\n\\r\\n        emit CampaignCreated(address(newCampaign), address(newToken));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x64fdc5eb90befde34f1fc9ecba8b94338ec66b863e6d461bb818fc15ad81141f\",\"license\":\"MIT\"},\"src/services/blockchain/contracts/DAO/GovToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n\\r\\ncontract GovToken is ERC20 , Ownable  {\\r\\n     constructor( uint256 initialSupply, string memory name, string memory symbol) ERC20(name, symbol) Ownable(msg.sender)  payable{\\r\\n        _mint(msg.sender, initialSupply); \\r\\n    }\\r\\n   \\r\\n      \\r\\n}\\r\\n\",\"keccak256\":\"0x8917935c2586c509330cc4d97d042726e7d41f6334e36f4a58354e75f399782c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657612302908161001c8239f35b600080fdfe60406080815260048036101561001457600080fd5b600090813560e01c63f4690f081461002b57600080fd5b346102b0576101003660031901126102b0576001600160401b039281358481116102ac5761005c90369084016102eb565b9360249485358281116102a85761007690369086016102eb565b916044359460018060a01b038087168097036102795760a4359460c4358481116102a4576100a790369085016102eb565b9760e4358581116102a0576100bf90369086016102eb565b98885190610c54908183019183831089841117610284579a809c849361010261010e948e9f9e60609e9f620016798939835260209d8e8401526060830190610346565b92818403910152610346565b03908bf08015610296578316968951926112f291828501928584108985111761028457926101618b9361015460c094899897620003878a3960e0855260e0850190610346565b908382038d850152610346565b938d820152606435606082015260843560808201523360a08201520152039089f0801561023f57169486519063a9059cbb60e01b825286838301528982015283816044818b895af1801561023f5761024d575b50833b1561024957855163f2fde38b60e01b81528181018690529187838a8183895af1801561023f57610215575b5050507f6056366dba45431fd6a8854ad9f2594942b02c4f2c3f6fbc329b3079b027b8b49495508351928352820152a180f35b829793971161022d57508452939450843880806101e2565b634e487b7160e01b8352604190528682fd5b87513d8a823e3d90fd5b8680fd5b8381813d831161027d575b61026281836102b4565b8101031261027957518015150361024957386101b4565b8780fd5b503d610258565b634e487b7160e01b8e52604188528e8efd5b89513d8c823e3d90fd5b8a80fd5b8980fd5b8580fd5b8380fd5b5080fd5b90601f801991011681019081106001600160401b038211176102d557604052565b634e487b7160e01b600052604160045260246000fd5b81601f82011215610341578035906001600160401b0382116102d5576040519261031f601f8401601f1916602001856102b4565b8284526020838301011161034157816000926020809301838601378301015290565b600080fd5b919082519283825260005b848110610372575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161035156fe608060405234620003a357620012f2803803806200001d81620003a8565b928339810160e082820312620003a35781516001600160401b039290838111620003a357826200004f918301620003ce565b926020928383015190828211620003a3576200006d918401620003ce565b916200007c6040820162000440565b94606082015192608083015195620000a560c06200009d60a0870162000440565b950162000440565b958351918383116200038d576000908154936001968786811c9616801562000382575b838710146200036e578190601f968781116200031b575b508390878311600114620002b7578592620002ab575b5050600019600383901b1c191690871b1782555b8251948511620002975785548681811c911680156200028c575b8282101462000278579081858796959493116200021f575b5080938511600114620001b8575092620001ac575b5050600019600383901b1c191690821b1790555b60018060a01b039384928360018060a01b031997168760025416176002556003556005551683600654161760065516906007541617600755604051610e9c9081620004568239f35b01519050388062000150565b868252808220879650939291601f198616915b828210620002055750508411620001eb575b505050811b01905562000164565b015160001960f88460031b161c19169055388080620001dd565b8484015186558897909501949384019390810190620001cb565b9091929394508683528183208580880160051c8201928489106200026e575b9188978a9297969594930160051c01915b8281106200025f5750506200013b565b8481558897508991016200024f565b925081926200023e565b634e487b7160e01b83526022600452602483fd5b90607f169062000123565b634e487b7160e01b82526041600452602482fd5b015190503880620000f5565b8580528486208a94509190601f198416875b87828210620003045750508411620002ea575b505050811b01825562000109565b015160001960f88460031b161c19169055388080620002dc565b8385015186558d97909501949384019301620002c9565b9091508480528385208780850160051c82019286861062000364575b918b91869594930160051c01915b82811062000355575050620000df565b8781558594508b910162000345565b9250819262000337565b634e487b7160e01b84526022600452602484fd5b95607f1695620000c8565b634e487b7160e01b600052604160045260246000fd5b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200038d57604052565b919080601f84011215620003a35782516001600160401b0381116200038d5760209062000404601f8201601f19168301620003a8565b92818452828287010111620003a35760005b8181106200042c57508260009394955001015290565b858101830151848201840152820162000416565b51906001600160a01b0382168203620003a35756fe6080604081815260048036101561001557600080fd5b600092833560e01c908163013cf08b14610cf5575080630d61b51914610c5d5780631614665c1461092657806316fc486914610907578063180fd87f1461087357806324600fc31461070b578063400e3949146106ec5780634a79d50c1461064e5780637284e4161461056d5780638da5cb5b14610544578063953b8fb8146105255780639d76ea58146104fc578063c255343e146104cf578063cc6cb19a14610496578063d5cef1331461031b578063de2ed893146102fe5763ed88c68e146100de57600080fd5b826003193601126102fa5734156102a6576003549182156102535760075481516318160ddd60e01b81526020946001600160a01b03909216919085818681865afa908115610249578791610218575b50803402903482040361020557869186910492604485518094819363a9059cbb60e01b8352338a8401528760248401525af180156101fb576101c0575b507f4b0304ab2f313234b1cea012339c8f8c3bf2c8bb357d81a579cfdb35d2e3d03092338652600885528286206101a2348254610ddb565b90556101af348254610ddb565b90558151933485528401523392a280f35b8481813d83116101f4575b6101d58183610d5a565b810103126101f05751801515036101ec573861016a565b8480fd5b8580fd5b503d6101cb565b83513d88823e3d90fd5b634e487b7160e01b875260118552602487fd5b90508581813d8311610242575b61022f8183610d5a565b8101031261023e57513861012d565b8680fd5b503d610225565b84513d89823e3d90fd5b906020608492519162461bcd60e51b8352820152602760248201527f54617267657420616d6f756e74206d7573742062652067726561746572207468604482015266616e207a65726f60c81b6064820152fd5b6020608492519162461bcd60e51b8352820152602960248201527f446f6e6174696f6e20616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152fd5b8280fd5b50346102fa57826003193601126102fa5760209250549051908152f35b50346102fa57826003193601126102fa578054600354111561045c573383526020600881528284205415610423573384526008815282842054600554116103e857338452600881528284209184835493558054908382039182116103d5575583808380156103cb575b8280929181923390f1156103bf577f3367befd2b2f39615cd79917c2153263c4af1d3945ec003e5d5bfc13a8d858339192519283523392a280f35b505051903d90823e3d90fd5b6108fc9150610384565b634e487b7160e01b865260119052602485fd5b606492519162461bcd60e51b835282015260186024820152771499599d5b99081d1a1c995cda1bdb19081b9bdd081b595d60421b6044820152fd5b606492519162461bcd60e51b83528201526016602482015275139bc8191bdb985d1a5bdb9cc81d1bc81c99599d5b9960521b6044820152fd5b6020606492519162461bcd60e51b8352820152601560248201527415185c99d95d08185b5bdd5b9d081c995858da1959605a1b6044820152fd5b50346102fa5760203660031901126102fa57356001600160a01b038116908190036102fa57828291602094526008845220549051908152f35b5050346104f857816003193601126104f85760025490516001600160a01b039091168152602090f35b5080fd5b5050346104f857816003193601126104f85760075490516001600160a01b039091168152602090f35b5050346104f857816003193601126104f8576020906003549051908152f35b5050346104f857816003193601126104f85760065490516001600160a01b039091168152602090f35b5090346102fa57826003193601126102fa5780519183600180549182821c928281168015610644575b6020958686108214610631575084885290811561060f57506001146105d5575b6105d186866105c7828b0383610d5a565b5191829182610d92565b0390f35b9295508083528583205b8284106105fc57505050826105d1946105c79282010194386105b6565b80548685018801529286019281016105df565b60ff191687860152505050151560051b83010192506105c7826105d1386105b6565b634e487b7160e01b845260229052602483fd5b93607f1693610596565b5090346102fa57826003193601126102fa578051918380549060019082821c9282811680156106e2575b6020958686108214610631575084885290811561060f57506001146106a8576105d186866105c7828b0383610d5a565b8080949750528583205b8284106106cf57505050826105d1946105c79282010194386105b6565b80548685018801529286019281016106b2565b93607f1693610678565b5050346104f857816003193601126104f857602090600a549051908152f35b50346102fa57826003193601126102fa57600a546000198101908111610860578352600960205260ff6003838520015460081c161561081f578054600354116107e1576006546001600160a01b039190821633036107945750828080809360025416479082821561078b575bf115610781575080f35b51903d90823e3d90fd5b506108fc610777565b608490602084519162461bcd60e51b8352820152602160248201527f4f6e6c7920746865206f776e65722063616e2077697468647261772066756e646044820152607360f81b6064820152fd5b6020606492519162461bcd60e51b8352820152601960248201527815185c99d95d08185b5bdd5b9d081b9bdd081c995858da1959603a1b6044820152fd5b6020606492519162461bcd60e51b8352820152601c60248201527b119d5b991cc81dda5d1a191c985dd85b081b9bdd08185b1b1bddd95960221b6044820152fd5b634e487b7160e01b845260118252602484fd5b5090346102fa57826003193601126102fa57600a549160001983146108f4575060038160209460018501600a5584815260098652203360018060a01b03198254161781550161ff001981541690557fcd423cc1203c0af96b9b3d68d73b3064a69de2d14450bb7181c5e5df2132b3588180518481523386820152a151908152f35b634e487b7160e01b845260119052602483fd5b5050346104f857816003193601126104f8576020906005549051908152f35b509190346104f857806003193601126104f857602492833591821515908184036101ec57823585526020600981528186209661096960ff60038a01541615610dfe565b87546001600160a01b03969087163314610c1d57600189019687549160028b019061099682548095610ddb565b9383600754169188516370a0823160e01b96878252338d83015289828a81885afa918215610c11578f92610bde575b501015610b9e5760ff898e9f9c809e9f9a9b9c9d01993381528a8c52205416610b6c5715610ab75750505090849160075416928651809481938252338b8301525afa908115610aad578891610a60575b509086610a3860609796959493600080516020610e478339815191529954610ddb565b90555b3388528152818720600160ff198254161790558151933584523390840152820152a180f35b959493928092915086813d8311610aa6575b610a7c8183610d5a565b81010312610aa25794519394929391929091600080516020610e47833981519152610a15565b8780fd5b503d610a72565b84513d8a823e3d90fd5b939195969780999a9b5088935094909451809581938252338d8301525afa918215610b62578992610b0c575b5091610b05600080516020610e47833981519152989694926060989694610ddb565b9055610a3b565b97959391509593918288813d8311610b5b575b610b298183610d5a565b81010312610b5757610b05606097600080516020610e47833981519152995193959799509193959750610ae3565b8880fd5b503d610b1f565b86513d8b823e3d90fd5b895162461bcd60e51b8152808d018a9052600d818901526c105b1c9958591e481d9bdd1959609a1b6044820152606490fd5b885162461bcd60e51b8152808c01899052601b818901527a496e73756666696369656e7420746f6b656e7320746f20766f746560281b6044820152606490fd5b9091508981813d8311610c0a575b610bf68183610d5a565b81010312610c06575190386109c5565b8e80fd5b503d610bec565b8f8c51903d90823e3d90fd5b835162461bcd60e51b8152808701849052601b818401527a10d85b9b9bdd081d9bdd19481bdb881bdddb881c1c9bdc1bdcd85b602a1b6044820152606490fd5b5090346102fa5760203660031901126102fa577f948f4a9cd986f1118c3fbd459f7a22b23c0693e1ca3ef06a6a8be5aa7d39cc039135808452600960205260ff8285206003810190815490610cb484831615610dfe565b6002600182015491015410610ce4575b506001821982541617809155835192835260081c1615156020820152a180f35b61ff00191661010017815538610cc4565b9291905034610d56576020366003190112610d5657908060a09460ff93358152600960205220600180861b038154169160018201546003600284015493015493865260208601528401528181161515606084015260081c1615156080820152f35b8380fd5b90601f8019910116810190811067ffffffffffffffff821117610d7c57604052565b634e487b7160e01b600052604160045260246000fd5b6020808252825181830181905290939260005b828110610dc757505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610da5565b91908201809211610de857565b634e487b7160e01b600052601160045260246000fd5b15610e0557565b60405162461bcd60e51b8152602060048201526019602482015278141c9bdc1bdcd85b08185b1c9958591e48195e1958dd5d1959603a1b6044820152606490fdfe0def80f9a3b4c7a4251442658ccf516bf33ea4acaf31638fc6da8ebdb0f64c72a2646970667358221220cbbaa56b36c312d43edc082ae978389246662947e5682585aad6a2e60a713d5564736f6c6343000814003360406080815262000c54803803806200001881620003e1565b9283398101606082820312620003dc57815191602091828201519160018060401b0392838111620003dc57826200005191830162000407565b9186820151848111620003dc576200006a920162000407565b918151818111620002dc576003908154906001948583811c93168015620003d1575b88841014620003bb578190601f9384811162000365575b508890848311600114620002fe57600092620002f2575b505060001982851b1c191690851b1782555b8451928311620002dc5760049485548581811c91168015620002d1575b88821014620002bc5782811162000271575b50869184116001146200020657938394918492600095620001fa575b50501b92600019911b1c19161781555b3315620001e35760058054336001600160a01b0319821681179092556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360025490838201809211620001ce57506000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9160025533835282815284832084815401905584519384523393a3516107da90816200047a8239f35b601190634e487b7160e01b6000525260246000fd5b6024906000855191631e4fbdf760e01b8352820152fd5b01519350388062000117565b9190601f198416928660005284886000209460005b8a898383106200025957505050106200023e575b50505050811b01815562000127565b01519060f884600019921b161c19169055388080806200022f565b8686015189559097019694850194889350016200021b565b86600052876000208380870160051c8201928a8810620002b2575b0160051c019086905b828110620002a5575050620000fb565b6000815501869062000295565b925081926200028c565b602287634e487b7160e01b6000525260246000fd5b90607f1690620000e9565b634e487b7160e01b600052604160045260246000fd5b015190503880620000ba565b90879350601f19831691866000528a6000209260005b8c8282106200034e575050841162000335575b505050811b018255620000cc565b015160001983871b60f8161c1916905538808062000327565b8385015186558b9790950194938401930162000314565b90915084600052886000208480850160051c8201928b8610620003b1575b918991869594930160051c01915b828110620003a1575050620000a3565b6000815585945089910162000391565b9250819262000383565b634e487b7160e01b600052602260045260246000fd5b92607f16926200008c565b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620002dc57604052565b919080601f84011215620003dc5782516001600160401b038111620002dc576020906200043d601f8201601f19168301620003e1565b92818452828287010111620003dc5760005b8181106200046557508260009394955001015290565b85810183015184820184015282016200044f56fe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde031461054057508063095ea7b31461049757806318160ddd1461047857806323b872dd1461038f578063313ce5671461037357806370a082311461033c578063715018a6146102dc5780638da5cb5b146102b357806395d89b41146101b1578063a9059cbb14610180578063dd62ed3e146101335763f2fde38b146100a757600080fd5b3461012f57602036600319011261012f576100c0610660565b906100c9610691565b6001600160a01b03918216928315610119575050600580546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b50503461017c578060031936011261017c5780602092610151610660565b61015961067b565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50503461017c578060031936011261017c576020906101aa6101a0610660565b60243590336106bd565b5160018152f35b5091903461017c578160031936011261017c57805190828454600181811c908083169283156102a9575b60209384841081146102965783885290811561027a5750600114610242575b505050829003601f01601f19168201926001600160401b0384118385101761022f575082918261022b925282610617565b0390f35b634e487b7160e01b815260418552602490fd5b919250868652828620918387935b83851061026657505050508301013880806101fa565b805488860183015293019284908201610250565b60ff1916878501525050151560051b84010190503880806101fa565b634e487b7160e01b895260228a52602489fd5b91607f16916101db565b50503461017c578160031936011261017c5760055490516001600160a01b039091168152602090f35b83346103395780600319360112610339576102f5610691565b600580546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b50503461017c57602036600319011261017c5760209181906001600160a01b03610364610660565b16815280845220549051908152f35b50503461017c578160031936011261017c576020905160128152f35b508234610339576060366003190112610339576103aa610660565b6103b261067b565b916044359360018060a01b0383168083526001602052868320338452602052868320549160001983036103ee575b6020886101aa8989896106bd565b86831061045657811561043f573315610428575082526001602090815286832033845281529186902090859003905582906101aa876103e0565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b9050610474868851938493637dc7a0d960e11b855233908501610786565b0390fd5b50503461017c578160031936011261017c576020906002549051908152f35b503461012f578160031936011261012f576104b0610660565b602435903315610529576001600160a01b031691821561051257508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b849150833461012f578260031936011261012f5782600354600181811c9080831692831561060d575b6020938484108114610296578388529081156105f157506001146105b857505050829003601f01601f19168201926001600160401b0384118385101761022f575082918261022b925282610617565b91925060038652828620918387935b8385106105dd57505050508301018580806101fa565b8054888601830152930192849082016105c7565b60ff1916878501525050151560051b84010190508580806101fa565b91607f1691610569565b6020808252825181830181905290939260005b82811061064c57505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161062a565b600435906001600160a01b038216820361067657565b600080fd5b602435906001600160a01b038216820361067657565b6005546001600160a01b031633036106a557565b60405163118cdaa760e01b8152336004820152602490fd5b916001600160a01b0380841692831561076d57169283156107545760009083825281602052604082205490838210610737575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b6104748460405193849363391434e360e21b855260048501610786565b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b604091949392606082019560018060a01b031682526020820152015256fea2646970667358221220eb42f5e7e310a2f2a6e28009f3c48ad0d3a93c59773b3d6ea39d6ea9fbaa48d964736f6c63430008140033a264697066735822122017a79fe3343e86aa9e3db28e62f6927b80c1e15ca576fbbb143b925a375b7e8064736f6c63430008140033",
  "deployedBytecode": "0x60406080815260048036101561001457600080fd5b600090813560e01c63f4690f081461002b57600080fd5b346102b0576101003660031901126102b0576001600160401b039281358481116102ac5761005c90369084016102eb565b9360249485358281116102a85761007690369086016102eb565b916044359460018060a01b038087168097036102795760a4359460c4358481116102a4576100a790369085016102eb565b9760e4358581116102a0576100bf90369086016102eb565b98885190610c54908183019183831089841117610284579a809c849361010261010e948e9f9e60609e9f620016798939835260209d8e8401526060830190610346565b92818403910152610346565b03908bf08015610296578316968951926112f291828501928584108985111761028457926101618b9361015460c094899897620003878a3960e0855260e0850190610346565b908382038d850152610346565b938d820152606435606082015260843560808201523360a08201520152039089f0801561023f57169486519063a9059cbb60e01b825286838301528982015283816044818b895af1801561023f5761024d575b50833b1561024957855163f2fde38b60e01b81528181018690529187838a8183895af1801561023f57610215575b5050507f6056366dba45431fd6a8854ad9f2594942b02c4f2c3f6fbc329b3079b027b8b49495508351928352820152a180f35b829793971161022d57508452939450843880806101e2565b634e487b7160e01b8352604190528682fd5b87513d8a823e3d90fd5b8680fd5b8381813d831161027d575b61026281836102b4565b8101031261027957518015150361024957386101b4565b8780fd5b503d610258565b634e487b7160e01b8e52604188528e8efd5b89513d8c823e3d90fd5b8a80fd5b8980fd5b8580fd5b8380fd5b5080fd5b90601f801991011681019081106001600160401b038211176102d557604052565b634e487b7160e01b600052604160045260246000fd5b81601f82011215610341578035906001600160401b0382116102d5576040519261031f601f8401601f1916602001856102b4565b8284526020838301011161034157816000926020809301838601378301015290565b600080fd5b919082519283825260005b848110610372575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161035156fe608060405234620003a357620012f2803803806200001d81620003a8565b928339810160e082820312620003a35781516001600160401b039290838111620003a357826200004f918301620003ce565b926020928383015190828211620003a3576200006d918401620003ce565b916200007c6040820162000440565b94606082015192608083015195620000a560c06200009d60a0870162000440565b950162000440565b958351918383116200038d576000908154936001968786811c9616801562000382575b838710146200036e578190601f968781116200031b575b508390878311600114620002b7578592620002ab575b5050600019600383901b1c191690871b1782555b8251948511620002975785548681811c911680156200028c575b8282101462000278579081858796959493116200021f575b5080938511600114620001b8575092620001ac575b5050600019600383901b1c191690821b1790555b60018060a01b039384928360018060a01b031997168760025416176002556003556005551683600654161760065516906007541617600755604051610e9c9081620004568239f35b01519050388062000150565b868252808220879650939291601f198616915b828210620002055750508411620001eb575b505050811b01905562000164565b015160001960f88460031b161c19169055388080620001dd565b8484015186558897909501949384019390810190620001cb565b9091929394508683528183208580880160051c8201928489106200026e575b9188978a9297969594930160051c01915b8281106200025f5750506200013b565b8481558897508991016200024f565b925081926200023e565b634e487b7160e01b83526022600452602483fd5b90607f169062000123565b634e487b7160e01b82526041600452602482fd5b015190503880620000f5565b8580528486208a94509190601f198416875b87828210620003045750508411620002ea575b505050811b01825562000109565b015160001960f88460031b161c19169055388080620002dc565b8385015186558d97909501949384019301620002c9565b9091508480528385208780850160051c82019286861062000364575b918b91869594930160051c01915b82811062000355575050620000df565b8781558594508b910162000345565b9250819262000337565b634e487b7160e01b84526022600452602484fd5b95607f1695620000c8565b634e487b7160e01b600052604160045260246000fd5b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200038d57604052565b919080601f84011215620003a35782516001600160401b0381116200038d5760209062000404601f8201601f19168301620003a8565b92818452828287010111620003a35760005b8181106200042c57508260009394955001015290565b858101830151848201840152820162000416565b51906001600160a01b0382168203620003a35756fe6080604081815260048036101561001557600080fd5b600092833560e01c908163013cf08b14610cf5575080630d61b51914610c5d5780631614665c1461092657806316fc486914610907578063180fd87f1461087357806324600fc31461070b578063400e3949146106ec5780634a79d50c1461064e5780637284e4161461056d5780638da5cb5b14610544578063953b8fb8146105255780639d76ea58146104fc578063c255343e146104cf578063cc6cb19a14610496578063d5cef1331461031b578063de2ed893146102fe5763ed88c68e146100de57600080fd5b826003193601126102fa5734156102a6576003549182156102535760075481516318160ddd60e01b81526020946001600160a01b03909216919085818681865afa908115610249578791610218575b50803402903482040361020557869186910492604485518094819363a9059cbb60e01b8352338a8401528760248401525af180156101fb576101c0575b507f4b0304ab2f313234b1cea012339c8f8c3bf2c8bb357d81a579cfdb35d2e3d03092338652600885528286206101a2348254610ddb565b90556101af348254610ddb565b90558151933485528401523392a280f35b8481813d83116101f4575b6101d58183610d5a565b810103126101f05751801515036101ec573861016a565b8480fd5b8580fd5b503d6101cb565b83513d88823e3d90fd5b634e487b7160e01b875260118552602487fd5b90508581813d8311610242575b61022f8183610d5a565b8101031261023e57513861012d565b8680fd5b503d610225565b84513d89823e3d90fd5b906020608492519162461bcd60e51b8352820152602760248201527f54617267657420616d6f756e74206d7573742062652067726561746572207468604482015266616e207a65726f60c81b6064820152fd5b6020608492519162461bcd60e51b8352820152602960248201527f446f6e6174696f6e20616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152fd5b8280fd5b50346102fa57826003193601126102fa5760209250549051908152f35b50346102fa57826003193601126102fa578054600354111561045c573383526020600881528284205415610423573384526008815282842054600554116103e857338452600881528284209184835493558054908382039182116103d5575583808380156103cb575b8280929181923390f1156103bf577f3367befd2b2f39615cd79917c2153263c4af1d3945ec003e5d5bfc13a8d858339192519283523392a280f35b505051903d90823e3d90fd5b6108fc9150610384565b634e487b7160e01b865260119052602485fd5b606492519162461bcd60e51b835282015260186024820152771499599d5b99081d1a1c995cda1bdb19081b9bdd081b595d60421b6044820152fd5b606492519162461bcd60e51b83528201526016602482015275139bc8191bdb985d1a5bdb9cc81d1bc81c99599d5b9960521b6044820152fd5b6020606492519162461bcd60e51b8352820152601560248201527415185c99d95d08185b5bdd5b9d081c995858da1959605a1b6044820152fd5b50346102fa5760203660031901126102fa57356001600160a01b038116908190036102fa57828291602094526008845220549051908152f35b5050346104f857816003193601126104f85760025490516001600160a01b039091168152602090f35b5080fd5b5050346104f857816003193601126104f85760075490516001600160a01b039091168152602090f35b5050346104f857816003193601126104f8576020906003549051908152f35b5050346104f857816003193601126104f85760065490516001600160a01b039091168152602090f35b5090346102fa57826003193601126102fa5780519183600180549182821c928281168015610644575b6020958686108214610631575084885290811561060f57506001146105d5575b6105d186866105c7828b0383610d5a565b5191829182610d92565b0390f35b9295508083528583205b8284106105fc57505050826105d1946105c79282010194386105b6565b80548685018801529286019281016105df565b60ff191687860152505050151560051b83010192506105c7826105d1386105b6565b634e487b7160e01b845260229052602483fd5b93607f1693610596565b5090346102fa57826003193601126102fa578051918380549060019082821c9282811680156106e2575b6020958686108214610631575084885290811561060f57506001146106a8576105d186866105c7828b0383610d5a565b8080949750528583205b8284106106cf57505050826105d1946105c79282010194386105b6565b80548685018801529286019281016106b2565b93607f1693610678565b5050346104f857816003193601126104f857602090600a549051908152f35b50346102fa57826003193601126102fa57600a546000198101908111610860578352600960205260ff6003838520015460081c161561081f578054600354116107e1576006546001600160a01b039190821633036107945750828080809360025416479082821561078b575bf115610781575080f35b51903d90823e3d90fd5b506108fc610777565b608490602084519162461bcd60e51b8352820152602160248201527f4f6e6c7920746865206f776e65722063616e2077697468647261772066756e646044820152607360f81b6064820152fd5b6020606492519162461bcd60e51b8352820152601960248201527815185c99d95d08185b5bdd5b9d081b9bdd081c995858da1959603a1b6044820152fd5b6020606492519162461bcd60e51b8352820152601c60248201527b119d5b991cc81dda5d1a191c985dd85b081b9bdd08185b1b1bddd95960221b6044820152fd5b634e487b7160e01b845260118252602484fd5b5090346102fa57826003193601126102fa57600a549160001983146108f4575060038160209460018501600a5584815260098652203360018060a01b03198254161781550161ff001981541690557fcd423cc1203c0af96b9b3d68d73b3064a69de2d14450bb7181c5e5df2132b3588180518481523386820152a151908152f35b634e487b7160e01b845260119052602483fd5b5050346104f857816003193601126104f8576020906005549051908152f35b509190346104f857806003193601126104f857602492833591821515908184036101ec57823585526020600981528186209661096960ff60038a01541615610dfe565b87546001600160a01b03969087163314610c1d57600189019687549160028b019061099682548095610ddb565b9383600754169188516370a0823160e01b96878252338d83015289828a81885afa918215610c11578f92610bde575b501015610b9e5760ff898e9f9c809e9f9a9b9c9d01993381528a8c52205416610b6c5715610ab75750505090849160075416928651809481938252338b8301525afa908115610aad578891610a60575b509086610a3860609796959493600080516020610e478339815191529954610ddb565b90555b3388528152818720600160ff198254161790558151933584523390840152820152a180f35b959493928092915086813d8311610aa6575b610a7c8183610d5a565b81010312610aa25794519394929391929091600080516020610e47833981519152610a15565b8780fd5b503d610a72565b84513d8a823e3d90fd5b939195969780999a9b5088935094909451809581938252338d8301525afa918215610b62578992610b0c575b5091610b05600080516020610e47833981519152989694926060989694610ddb565b9055610a3b565b97959391509593918288813d8311610b5b575b610b298183610d5a565b81010312610b5757610b05606097600080516020610e47833981519152995193959799509193959750610ae3565b8880fd5b503d610b1f565b86513d8b823e3d90fd5b895162461bcd60e51b8152808d018a9052600d818901526c105b1c9958591e481d9bdd1959609a1b6044820152606490fd5b885162461bcd60e51b8152808c01899052601b818901527a496e73756666696369656e7420746f6b656e7320746f20766f746560281b6044820152606490fd5b9091508981813d8311610c0a575b610bf68183610d5a565b81010312610c06575190386109c5565b8e80fd5b503d610bec565b8f8c51903d90823e3d90fd5b835162461bcd60e51b8152808701849052601b818401527a10d85b9b9bdd081d9bdd19481bdb881bdddb881c1c9bdc1bdcd85b602a1b6044820152606490fd5b5090346102fa5760203660031901126102fa577f948f4a9cd986f1118c3fbd459f7a22b23c0693e1ca3ef06a6a8be5aa7d39cc039135808452600960205260ff8285206003810190815490610cb484831615610dfe565b6002600182015491015410610ce4575b506001821982541617809155835192835260081c1615156020820152a180f35b61ff00191661010017815538610cc4565b9291905034610d56576020366003190112610d5657908060a09460ff93358152600960205220600180861b038154169160018201546003600284015493015493865260208601528401528181161515606084015260081c1615156080820152f35b8380fd5b90601f8019910116810190811067ffffffffffffffff821117610d7c57604052565b634e487b7160e01b600052604160045260246000fd5b6020808252825181830181905290939260005b828110610dc757505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610da5565b91908201809211610de857565b634e487b7160e01b600052601160045260246000fd5b15610e0557565b60405162461bcd60e51b8152602060048201526019602482015278141c9bdc1bdcd85b08185b1c9958591e48195e1958dd5d1959603a1b6044820152606490fdfe0def80f9a3b4c7a4251442658ccf516bf33ea4acaf31638fc6da8ebdb0f64c72a2646970667358221220cbbaa56b36c312d43edc082ae978389246662947e5682585aad6a2e60a713d5564736f6c6343000814003360406080815262000c54803803806200001881620003e1565b9283398101606082820312620003dc57815191602091828201519160018060401b0392838111620003dc57826200005191830162000407565b9186820151848111620003dc576200006a920162000407565b918151818111620002dc576003908154906001948583811c93168015620003d1575b88841014620003bb578190601f9384811162000365575b508890848311600114620002fe57600092620002f2575b505060001982851b1c191690851b1782555b8451928311620002dc5760049485548581811c91168015620002d1575b88821014620002bc5782811162000271575b50869184116001146200020657938394918492600095620001fa575b50501b92600019911b1c19161781555b3315620001e35760058054336001600160a01b0319821681179092556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360025490838201809211620001ce57506000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9160025533835282815284832084815401905584519384523393a3516107da90816200047a8239f35b601190634e487b7160e01b6000525260246000fd5b6024906000855191631e4fbdf760e01b8352820152fd5b01519350388062000117565b9190601f198416928660005284886000209460005b8a898383106200025957505050106200023e575b50505050811b01815562000127565b01519060f884600019921b161c19169055388080806200022f565b8686015189559097019694850194889350016200021b565b86600052876000208380870160051c8201928a8810620002b2575b0160051c019086905b828110620002a5575050620000fb565b6000815501869062000295565b925081926200028c565b602287634e487b7160e01b6000525260246000fd5b90607f1690620000e9565b634e487b7160e01b600052604160045260246000fd5b015190503880620000ba565b90879350601f19831691866000528a6000209260005b8c8282106200034e575050841162000335575b505050811b018255620000cc565b015160001983871b60f8161c1916905538808062000327565b8385015186558b9790950194938401930162000314565b90915084600052886000208480850160051c8201928b8610620003b1575b918991869594930160051c01915b828110620003a1575050620000a3565b6000815585945089910162000391565b9250819262000383565b634e487b7160e01b600052602260045260246000fd5b92607f16926200008c565b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620002dc57604052565b919080601f84011215620003dc5782516001600160401b038111620002dc576020906200043d601f8201601f19168301620003e1565b92818452828287010111620003dc5760005b8181106200046557508260009394955001015290565b85810183015184820184015282016200044f56fe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde031461054057508063095ea7b31461049757806318160ddd1461047857806323b872dd1461038f578063313ce5671461037357806370a082311461033c578063715018a6146102dc5780638da5cb5b146102b357806395d89b41146101b1578063a9059cbb14610180578063dd62ed3e146101335763f2fde38b146100a757600080fd5b3461012f57602036600319011261012f576100c0610660565b906100c9610691565b6001600160a01b03918216928315610119575050600580546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b50503461017c578060031936011261017c5780602092610151610660565b61015961067b565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50503461017c578060031936011261017c576020906101aa6101a0610660565b60243590336106bd565b5160018152f35b5091903461017c578160031936011261017c57805190828454600181811c908083169283156102a9575b60209384841081146102965783885290811561027a5750600114610242575b505050829003601f01601f19168201926001600160401b0384118385101761022f575082918261022b925282610617565b0390f35b634e487b7160e01b815260418552602490fd5b919250868652828620918387935b83851061026657505050508301013880806101fa565b805488860183015293019284908201610250565b60ff1916878501525050151560051b84010190503880806101fa565b634e487b7160e01b895260228a52602489fd5b91607f16916101db565b50503461017c578160031936011261017c5760055490516001600160a01b039091168152602090f35b83346103395780600319360112610339576102f5610691565b600580546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b50503461017c57602036600319011261017c5760209181906001600160a01b03610364610660565b16815280845220549051908152f35b50503461017c578160031936011261017c576020905160128152f35b508234610339576060366003190112610339576103aa610660565b6103b261067b565b916044359360018060a01b0383168083526001602052868320338452602052868320549160001983036103ee575b6020886101aa8989896106bd565b86831061045657811561043f573315610428575082526001602090815286832033845281529186902090859003905582906101aa876103e0565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b9050610474868851938493637dc7a0d960e11b855233908501610786565b0390fd5b50503461017c578160031936011261017c576020906002549051908152f35b503461012f578160031936011261012f576104b0610660565b602435903315610529576001600160a01b031691821561051257508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b849150833461012f578260031936011261012f5782600354600181811c9080831692831561060d575b6020938484108114610296578388529081156105f157506001146105b857505050829003601f01601f19168201926001600160401b0384118385101761022f575082918261022b925282610617565b91925060038652828620918387935b8385106105dd57505050508301018580806101fa565b8054888601830152930192849082016105c7565b60ff1916878501525050151560051b84010190508580806101fa565b91607f1691610569565b6020808252825181830181905290939260005b82811061064c57505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161062a565b600435906001600160a01b038216820361067657565b600080fd5b602435906001600160a01b038216820361067657565b6005546001600160a01b031633036106a557565b60405163118cdaa760e01b8152336004820152602490fd5b916001600160a01b0380841692831561076d57169283156107545760009083825281602052604082205490838210610737575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b6104748460405193849363391434e360e21b855260048501610786565b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b604091949392606082019560018060a01b031682526020820152015256fea2646970667358221220eb42f5e7e310a2f2a6e28009f3c48ad0d3a93c59773b3d6ea39d6ea9fbaa48d964736f6c63430008140033a264697066735822122017a79fe3343e86aa9e3db28e62f6927b80c1e15ca576fbbb143b925a375b7e8064736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}