{
  "address": "0x3431aD2bae080018B862C58FB03455bB260DA5e4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_associationFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "campaignAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "CampaignCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "associationFactory",
      "outputs": [
        {
          "internalType": "contract AssociationFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_targetUser",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_targetAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_refundThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_tokenSymbol",
          "type": "string"
        }
      ],
      "name": "createCampaign",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa77054f0f455eef89eee08aee3f9de55c66246592f7872ec20f4c31335f6abf4",
  "receipt": {
    "to": null,
    "from": "0xe1578fc20E333933Fa60EFB7F300ED022fa920c4",
    "contractAddress": "0x3431aD2bae080018B862C58FB03455bB260DA5e4",
    "transactionIndex": 23,
    "gasUsed": "2450728",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xcf23f66d3aa60757182f8e7f56844fea04833960a2cfca4c00f1ea7935e273cc",
    "transactionHash": "0xa77054f0f455eef89eee08aee3f9de55c66246592f7872ec20f4c31335f6abf4",
    "logs": [],
    "blockNumber": 6030542,
    "cumulativeGasUsed": "4657564",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE692739C654ED63eb812A069ef4689B893c3d70B"
  ],
  "numDeployments": 2,
  "solcInputHash": "b66bde8e7bb114c40674ac7066f301d3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_associationFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"campaignAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"CampaignCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"associationFactory\",\"outputs\":[{\"internalType\":\"contract AssociationFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_targetUser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_targetAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_refundThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_tokenSymbol\",\"type\":\"string\"}],\"name\":\"createCampaign\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/services/blockchain/contracts/Campaign/CharityCampaignFactoryDAO.sol\":\"CharityCampaignFactoryDAO\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"src/services/blockchain/contracts/Association/Association.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ncontract AssociationContract {\\n    string public name;\\n    string public description;\\n    string public email;\\n    string public phoneNumber;\\n    string public country;\\n    string public streetAddress;\\n    string public city;\\n    string public state;\\n    string public postalCode;\\n    uint256 public creationDate; \\n    uint256 public size;\\n    string public domain;\\n    string[] public imagesHashes;\\n\\n    // Event to be emitted when the association contract is deployed\\n    event AssociationContractDeployed(\\n        string name,\\n        string description,\\n        string email,\\n        string phoneNumber,\\n        string country,\\n        string streetAddress,\\n        string city,\\n        string state,\\n        string postalCode,\\n        uint256 creationDate,\\n        uint256 size,\\n        string domain,\\n        string[] imagesHashes\\n    );\\n\\n    // Constructor to initialize the association details\\n    constructor(\\n        string memory _name,\\n        string memory _description,\\n        string memory _email,\\n        string memory _phoneNumber,\\n        string memory _country,\\n        string memory _streetAddress,\\n        string memory _city,\\n        string memory _state,\\n        string memory _postalCode,\\n        uint256 _creationDate,\\n        uint256 _size,\\n        string memory _domain,\\n        string[] memory _imagesHashes\\n            ) {\\n        name = _name;\\n        description = _description;\\n        email = _email;\\n        phoneNumber = _phoneNumber;\\n        country = _country;\\n        streetAddress = _streetAddress;\\n        city = _city;\\n        state = _state;\\n        postalCode = _postalCode;\\n        creationDate = _creationDate; \\n        size = _size;\\n        domain = _domain;\\n        imagesHashes = _imagesHashes;\\n\\n        emit AssociationContractDeployed(\\n            _name,\\n            _description,\\n            _email,\\n            _phoneNumber,\\n            _country,\\n            _streetAddress,\\n            _city,\\n            _state,\\n            _postalCode,\\n            _creationDate, \\n            _size,\\n            _domain,\\n            _imagesHashes\\n        );\\n    }\\n\\n    function getAssociationDetails() public view returns (\\n        string memory _name,\\n        string memory _description,\\n        string memory _email,\\n        string memory _phoneNumber,\\n        string memory _country,\\n        string memory _streetAddress,\\n        string memory _city,\\n        string memory _state,\\n        string memory _postalCode,\\n        uint256 _creationDate,\\n        uint256 _size,\\n        string memory _domain,\\n        string[] memory _imagesHashes\\n\\n    ) {\\n        return (\\n            name,\\n            description,\\n            email,\\n            phoneNumber,\\n            country,\\n            streetAddress,\\n            city,\\n            state,\\n            postalCode,\\n            creationDate,\\n            size,\\n            domain,\\n            imagesHashes\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x92ca398cdc97f260685112f1eeed0e2daffc446aae9385b11cd440f57c7d2037\",\"license\":\"MIT\"},\"src/services/blockchain/contracts/Association/AssociationFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./Association.sol\\\";\\n\\ncontract AssociationFactory {\\n    event AssociationContractDeployed(address indexed associationContract, address indexed creator);\\n\\n    address public plateformAddress;\\n\\n    enum Status {\\n        Active,\\n        InActive\\n    }\\n\\n    struct AssociationInfo {\\n        address associationAddress;\\n        Status status;\\n    }\\n\\n    mapping(address => Status) public associations;\\n    mapping(address => address) public walletToAssociation;\\n\\n    address[] public associationsArray;\\n    uint public associationsCount;\\n\\n    constructor(address _plateformCAddress) {\\n        plateformAddress = _plateformCAddress;\\n    }\\n\\n    function getAssociationWithStatus(uint _index) public view returns (AssociationInfo memory) {\\n        address associationAddress = associationsArray[_index];\\n        return AssociationInfo({\\n            associationAddress: associationAddress,\\n            status: associations[associationAddress]\\n        });\\n    }\\n\\n    function getAssociationsWithStatus() public view returns (AssociationInfo[] memory) {\\n        AssociationInfo[] memory associationInfoArray = new AssociationInfo[](associationsCount);\\n        for (uint i = 0; i < associationsArray.length; i++) {\\n            address associationAddress = associationsArray[i];\\n            associationInfoArray[i] = AssociationInfo({\\n                associationAddress: associationAddress,\\n                status: associations[associationAddress]\\n            });\\n        }\\n        return associationInfoArray;\\n    }\\n\\n    function deployAssociationContract(\\n        string memory _name,\\n        string memory _description,\\n        string memory _email,\\n        string memory _phoneNumber,\\n        string memory _country,\\n        string memory _streetAddress,\\n        string memory _city,\\n        string memory _state,\\n        string memory _postalCode,\\n        uint256 _creationDate,\\n        uint256 _size,\\n        string memory _domain,\\n        string[] memory _imagesHashes,\\n        address _walletAddress\\n    ) external onlyAdmin returns (address) {\\n        if( walletToAssociation[_walletAddress] != address(0) ) {\\n            revert(\\\"This wallet address is already associated with an association\\\");\\n        }\\n        AssociationContract newContract = new AssociationContract(\\n            _name,\\n            _description,\\n            _email,\\n            _phoneNumber,\\n            _country,\\n            _streetAddress,\\n            _city,\\n            _state,\\n            _postalCode,\\n            _creationDate,\\n            _size,\\n            _domain,    \\n            _imagesHashes\\n        );\\n        associations[address(newContract)] = Status.Active;\\n        associationsArray.push(address(newContract));\\n        associationsCount++;\\n        walletToAssociation[_walletAddress] = address(newContract);\\n\\n        emit AssociationContractDeployed(address(newContract), msg.sender);\\n\\n        return address(newContract);\\n    }\\n\\n    function setPlateformAddress(address _plateformAddress) external onlyAdmin {\\n        plateformAddress = _plateformAddress;\\n    }\\n\\n    function changeAssociationStatus(address _associationAddress, Status _status) external onlyAdmin {\\n        associations[_associationAddress] = _status;\\n    }\\n\\n    function isAssociationAdmin( address _adminAddress) external view returns (bool, address) {\\n        if( walletToAssociation[_adminAddress] != address(0) ) {\\n            return (true, walletToAssociation[_adminAddress]);\\n        }else {\\n            return (false, address(0)); \\n        }\\n    }   \\n\\n    function addAdminToAssociation( address _adminToAdd) public{\\n        if( walletToAssociation[msg.sender] == address(0) ) {\\n            revert(\\\"This wallet address is not associated with any association\\\");\\n        }\\n        walletToAssociation[_adminToAdd] = walletToAssociation[msg.sender];\\n    }\\n    modifier onlyAdmin {\\n        require(plateformAddress == msg.sender, \\\"Only admin can call this function\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xe18b32b6d4979a18854e083445ce5337f3a630342e62b10d189979e99501d0f8\",\"license\":\"MIT\"},\"src/services/blockchain/contracts/Campaign/CharityCampaignDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\n\\ncontract CharityCampaignDAO  {\\n    struct Proposal {\\n        address proposer;\\n        uint256 votesFor;\\n        uint256 votesAgainst;\\n        bool executed;\\n        bool allowed;\\n        uint256 timestamp;\\n\\n        mapping(address => bool) voters; // Added mapping to track voters\\n    }\\n\\n    struct Tranche{\\n        bool state;\\n        uint256 percentage  ; \\n    }\\n\\n    string public title;\\n    string public description;\\n    address public targetUser;\\n    uint256 public targetAmount;\\n    uint256 public totalDonations;\\n    uint256 public totalVotingPower;\\n    uint256 public refundThreshold;\\n    uint public finalBalance ; \\n    address public owner;\\n    uint public duration  = 120;\\n    uint startTimeStamp  ; \\n\\n    uint256 public proposalDelay = 120;\\n        uint256 public trancheDelay = 120;\\n\\n    bool public allowWithdraw ;\\n    uint public lastTimeStamp;    \\n\\n\\n    IERC20 public tokenAddress; // The associated token contract\\n\\n\\n    mapping(address => uint256) public donations;\\n    mapping(address => bool) public isDonor;\\n\\n    address[] public  donors ;\\n    mapping(uint256 => Proposal) public proposals;\\n    uint256 public numProposals;\\n    Tranche[] public tranches ;\\n\\n\\n    event DonationReceived(\\n        address indexed donor,\\n        uint256 amount,\\n        uint256 tokensIssued\\n    );\\n    event RefundProcessed(address indexed donor, uint256 amount);\\n    event ProposalCreated(uint256 proposalId, address proposer);\\n    event ProposalVoted(uint256 proposalId, address voter, bool inSupport);\\n    event ProposalExecuted(uint256 proposalId, bool allowed);\\n    event ProposalScheduled(uint256 indexed proposalId, bytes32 indexed timelockId);\\n\\n\\n    constructor(\\n        string memory _title,\\n        string memory _description,\\n        address _targetUser,\\n        uint256 _targetAmount,\\n        uint256 _refundThreshold,\\n        address _owner,\\n        address _tokenAddress // Address of the associated token contract\\n    ) {\\n        title = _title;\\n        description = _description;\\n        targetUser = _targetUser;\\n        targetAmount = _targetAmount;\\n        refundThreshold = _refundThreshold;\\n        owner = _owner;\\n        tokenAddress = IERC20(_tokenAddress);\\n        startTimeStamp = block.timestamp;\\n        allowWithdraw = true ; \\n        tranches.push(Tranche(false ,20 ));\\n        tranches.push(Tranche(false ,30 ));\\n        tranches.push(Tranche(false ,50 ));\\n\\n    }\\n   \\n    function addDonor(address _donor) internal {\\n        if(!isDonor[_donor]){\\n      donors.push(_donor);\\n        isDonor[_donor] = true;\\n        }\\n  \\n    }\\n\\n    function donate() external payable {\\n        require(msg.value > 0, \\\"Donation amount must be greater than zero\\\");\\n\\n        // Calculate the amount of tokens to issue to the donor\\n        uint256 tokensToIssue = calculateTokens(msg.value);\\n\\n        // Issue tokens to the donor\\n        tokenAddress.transfer(msg.sender, tokensToIssue);\\n\\n        // Update donation and total donation amounts\\n        \\n        donations[msg.sender] += msg.value;\\n        addDonor(msg.sender) ; \\n        totalDonations += msg.value;\\n        totalVotingPower += tokensToIssue ; \\n\\n        emit DonationReceived(msg.sender, msg.value, tokensToIssue);\\n    }\\n\\n    function calculateTokens(uint256 _donationAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        require(targetAmount > 0, \\\"Target amount must be greater than zero\\\");\\n\\n        // Calculate the ratio of tokens to issue based on the donation amount and target amount\\n        // Use SafeMath to prevent integer overflow\\n        uint256 tokensToIssue = (_donationAmount * tokenAddress.totalSupply()) /\\n            targetAmount;\\n\\n        return tokensToIssue;\\n    }\\n\\n    // function requestRefund() external {\\n    //     require(totalDonations < targetAmount, \\\"Target amount reached\\\");\\n    //     require(donations[msg.sender] > 0, \\\"No donations to refund\\\");\\n    //     require(donations[msg.sender] >= refundThreshold, \\\"Refund threshold not met\\\");\\n\\n    //     uint256 amountToRefund = donations[msg.sender];\\n    //     donations[msg.sender] = 0;\\n    //     totalDonations -= amountToRefund;\\n\\n    //     payable(msg.sender).transfer(amountToRefund);\\n\\n    //     emit RefundProcessed(msg.sender, amountToRefund);\\n    // }\\n\\n    function createProposal() internal returns (uint256) {\\n        uint256 proposalId = numProposals++;\\n        Proposal storage proposal = proposals[proposalId];\\n        proposal.proposer = address(this);\\n        proposal.allowed = true; // Default to not allowing funds withdrawal\\n        proposal.timestamp = block.timestamp + proposalDelay;\\n        emit ProposalCreated(proposalId, msg.sender);\\n\\n\\n\\n\\n        return proposalId;\\n    }\\n\\n    function voteOnProposal(bool inSupport) external {\\n        Proposal storage proposal = proposals[numProposals-1];\\n        require(!proposal.executed, \\\"Proposal already executed\\\");\\n        require(proposal.proposer != msg.sender, \\\"Cannot vote on own proposal\\\");\\n        require(tokenAddress.balanceOf(msg.sender)>0, \\\"Insufficient tokens to vote\\\");\\n        require(!proposal.voters[msg.sender], \\\"Already voted\\\");\\n\\n        if (inSupport) {\\n            proposal.votesFor += tokenAddress.balanceOf(msg.sender);\\n        } else {\\n            proposal.votesAgainst += tokenAddress.balanceOf(msg.sender);\\n        }\\n        proposal.voters[msg.sender] = true;\\n\\n        emit ProposalVoted(numProposals-1, msg.sender, inSupport);\\n    }\\n\\n    function executeProposal() external  {\\n        Proposal storage proposal = proposals[numProposals-1];\\n\\n        if(!proposal.executed){\\n\\n        \\n\\n        if ((totalVotingPower<=(proposal.votesFor + proposal.votesAgainst)*2) && (proposal.votesFor > proposal.votesAgainst)) {\\n\\n            \\n            proposal.allowed = false;\\n            allowWithdraw =  false ;\\n            uint256 balance = address(this).balance ;\\n             for (uint256 i = 0; i < donors.length; i++) {\\n            address donorAddress = donors[i];\\n            if (donations[donorAddress] > 0 ) {\\n                uint256 amountToRefund = (balance * tokenAddress.balanceOf(donorAddress)) / totalVotingPower;\\n          \\n                // totalVotingPower -= tokenAddress.balanceOf(donorAddress);\\n                 payable(donorAddress).transfer(amountToRefund);\\n                emit RefundProcessed(donorAddress, amountToRefund);\\n            }\\n        }\\n   \\n\\n        }else{\\n            allowWithdraw =  true ; \\n\\n\\n        }\\n\\n        proposal.executed = true;\\n\\n        emit ProposalExecuted(numProposals-1, proposal.allowed);\\n        }\\n    }\\n\\n    function withdrawFunds() external {\\n        require(block.timestamp>(startTimeStamp+duration) , \\\"Ongoing Campaign : you can't withdraw\\\");\\n\\n        if (!tranches[0].state ){\\n         require(allowWithdraw, \\\"Funds withdrawal not allowed\\\");\\n        require(msg.sender == owner, \\\"Only the owner can withdraw funds\\\");\\n\\n        finalBalance = address(this).balance ; \\n        uint amountToTransfer = (finalBalance* tranches[0].percentage)/100 ;\\n\\n        tranches[0].state = true ; \\n        lastTimeStamp = block.timestamp;\\n        payable(msg.sender).transfer(amountToTransfer);\\n        createProposal();\\n\\n        }\\n        else if(!tranches[1].state ){\\n        require(block.timestamp>(lastTimeStamp+trancheDelay) , \\\"Wait tranche not unlocked : you can't withdraw\\\");\\n\\n        this.executeProposal();\\n \\n        if(allowWithdraw){\\n   require(msg.sender == owner, \\\"Only the owner can withdraw funds\\\");\\n        tranches[1].state = true ; \\n        lastTimeStamp = block.timestamp;\\n        createProposal();\\n        uint amountToTransfer = (finalBalance* tranches[1].percentage)/100 ;\\n\\n        payable(msg.sender).transfer(amountToTransfer);\\n        }\\n     \\n\\n\\n        }\\n        else if(!tranches[2].state){\\n\\n        require(block.timestamp>(lastTimeStamp+trancheDelay) , \\\"Wait tranche not unlocked : you can't withdraw\\\");\\n\\n        this.executeProposal();\\n\\n\\n        if(allowWithdraw){\\n        require(msg.sender == owner, \\\"Only the owner can withdraw funds\\\");\\n        tranches[2].state = true ; \\n        uint amountToTransfer = (finalBalance* tranches[2].percentage)/100 ;\\n\\n        payable(msg.sender).transfer(amountToTransfer);\\n        }\\n        }\\n\\n        // require(allowWithdraw, \\\"Funds withdrawal not allowed\\\");\\n        // require(totalDonations >= targetAmount, \\\"Target amount not reached\\\");\\n\\n    }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\",\"keccak256\":\"0xb93f0ea813bcd60127be04fbc53dd558092e2174b95205d42c4075f507611825\",\"license\":\"MIT\"},\"src/services/blockchain/contracts/Campaign/CharityCampaignFactoryDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport \\\"./CharityCampaignDAO.sol\\\";\\nimport \\\"./GovToken.sol\\\";\\nimport \\\"../Association/AssociationFactory.sol\\\";\\n\\ncontract CharityCampaignFactoryDAO {\\nevent CampaignCreated(address campaignAddress, address tokenAddress);\\n\\n    AssociationFactory public associationFactory;\\n    constructor(address _associationFactory) {\\n        associationFactory = AssociationFactory(_associationFactory);\\n    }\\n\\n    function createCampaign(\\n        string memory _name,\\n        string memory _description,\\n        address _targetUser,\\n        uint256 _targetAmount,\\n        uint256 _refundThreshold , \\n         uint256 _tokenSupply,\\n        string memory _tokenName,\\n        string memory _tokenSymbol // Add the token name and abbreviation parameters\\n    ) external  {\\n       GovToken newToken = new GovToken(_tokenSupply, _tokenName, _tokenSymbol);\\n\\n       \\n        \\n        // Deploy the campaign contract, passing the token contract address\\n        CharityCampaignDAO newCampaign = new CharityCampaignDAO(\\n            _name,\\n            _description,\\n            _targetUser,\\n            _targetAmount,\\n            _refundThreshold,\\n            msg.sender,\\n           address( newToken )\\n        );\\n\\n\\n               newToken.transfer(address(newCampaign), _tokenSupply);\\n            \\n\\n        // Transfer ownership of the token contract to the campaign contract\\n        newToken.transferOwnership(address(newCampaign));\\n\\n        emit CampaignCreated(address(newCampaign), address(newToken));\\n    }\\n}\\n\",\"keccak256\":\"0xd47034199a07002f41022064186ab9040cf8aae456cb62dddf6e9ac50ca3f53f\",\"license\":\"MIT\"},\"src/services/blockchain/contracts/Campaign/GovToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n\\ncontract GovToken is ERC20 , Ownable  {\\n     constructor( uint256 initialSupply, string memory name, string memory symbol) ERC20(name, symbol) Ownable(msg.sender)  payable{\\n        _mint(msg.sender, initialSupply); \\n    }\\n   \\n      \\n}\\n\",\"keccak256\":\"0x7de31dae33663ea1c88ee6b92c243460964db53ed3f55c8168f5c4d72ff1bd3e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60803461007457601f612b7e38819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600080546001600160a01b031916919091179055604051612aee90816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040908082526004803610156200001757600080fd5b600091823560e01c9081637a8c719514620002ef575063f4690f08146200003d57600080fd5b34620002eb57610100366003190112620002eb576001600160401b03928135848111620002e7576200007390369084016200034d565b936024948535828111620002e3576200009090369086016200034d565b916044359460018060a01b03808716809703620002b35760a4359460c435848111620002df57620000c590369085016200034d565b9760e435858111620002db57620000e090369086016200034d565b98885190610c54908183019183831089841117620002bf579a809c84936200012762000134948e9f9e60609e9f62001e658939835260209d8e8401526060830190620003ad565b92818403910152620003ad565b03908bf08015620002d157831696895192611a75918285019285841089851117620002bf57926200018d8b936200017f60c094899897620003f08a3960e0855260e0850190620003ad565b908382038d850152620003ad565b938d820152606435606082015260843560808201523360a08201520152039089f080156200027357169486519063a9059cbb60e01b825286838301528982015283816044818b895af18015620002735762000281575b50833b156200027d57855163f2fde38b60e01b81528181018690529187838a8183895af18015620002735762000247575b5050507f6056366dba45431fd6a8854ad9f2594942b02c4f2c3f6fbc329b3079b027b8b49495508351928352820152a180f35b829793971162000261575084529394508438808062000214565b634e487b7160e01b8352604190528682fd5b87513d8a823e3d90fd5b8680fd5b8381813d8311620002b7575b62000299818362000315565b81010312620002b35751801515036200027d5738620001e3565b8780fd5b503d6200028d565b634e487b7160e01b8e52604188528e8efd5b89513d8c823e3d90fd5b8a80fd5b8980fd5b8580fd5b8380fd5b5080fd5b839034620002eb5781600319360112620002eb5790546001600160a01b03168152602090f35b90601f801991011681019081106001600160401b038211176200033757604052565b634e487b7160e01b600052604160045260246000fd5b81601f82011215620003a8578035906001600160401b03821162000337576040519262000385601f8401601f19166020018562000315565b82845260208383010111620003a857816000926020809301838601378301015290565b600080fd5b919082519283825260005b848110620003da575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201620003b856fe608060405234620004265762001a75803803806200001d816200044b565b928339810160e082820312620004265781516001600160401b0391908281116200042657816200004f91850162000471565b602091828501519084821162000426576200006c91860162000471565b936200007b60408201620004e3565b90606081015190608081015191620000a460c06200009c60a08501620004e3565b9301620004e3565b9160786009556078600b556078600c5585519780891162000410576000988954976001988981811c9116801562000405575b8b821014620003f1579180918b8d94601f809681831162000396575b92505050508b908d85841160011462000330579262000324575b5050600019600383901b1c191690891b178a555b8a51918211620003105787548881811c9116801562000305575b8a821014620002f157818111620002a9575b508890821160011462000239579080603299989796959493926200021d9c8c926200022d575b5050600019600383901b1c191690871b1786555b60018060a01b039384928360018060a01b03199716876002541617600255600355600655168360085416176008551690600f541617600f5542600a5560ff19600d541617600d55620001ea620001db6200042b565b848152601483820152620004f8565b62000207620001f86200042b565b848152601e83820152620004f8565b620002116200042b565b928352820152620004f8565b60405161151790816200055e8239f35b01519050388062000172565b878a52888a2090601f1983168b5b8181106200029357509183916200021d9d8b9a999897969560329d9c951062000279575b505050811b01865562000186565b015160001960f88460031b161c191690553880806200026b565b8d8301518455928a0192918b01918b0162000247565b888b52898b208280850160051c8201928c8610620002e7575b0160051c019089905b828110620002db5750506200014c565b8c8155018990620002cb565b92508192620002c2565b634e487b7160e01b8b52602260045260248bfd5b90607f16906200013a565b634e487b7160e01b8a52604160045260248afd5b0151905038806200010c565b8080528d81208d9550929190601f198516908f5b8282106200037e575050841162000364575b505050811b018a5562000120565b015160001960f88460031b161c1916905538808062000356565b8385015186558f979095019493840193018f62000344565b8394955080809492939452209181860160051c8301938610620003e7575b859493910160051c909101908c908f5b838210620003d8578f9350879150620000f2565b81558594508d91018f620003c4565b92508192620003b4565b634e487b7160e01b8c52602260045260248cfd5b90607f1690620000d6565b634e487b7160e01b600052604160045260246000fd5b600080fd5b60408051919082016001600160401b038111838210176200041057604052565b6040519190601f01601f191682016001600160401b038111838210176200041057604052565b919080601f84011215620004265782516001600160401b0381116200041057602090620004a7601f8201601f191683016200044b565b92818452828287010111620004265760005b818110620004cf57508260009394955001015290565b8581018301518482018401528201620004b9565b51906001600160a01b03821682036200042657565b60155468010000000000000000811015620004105760018101806015558110156200054757602060019160156000528160002090831b01928051151560ff801986541691161784550151910155565b634e487b7160e01b600052603260045260246000fdfe608060408181526004918236101561001657600080fd5b600092833560e01c918263013cf08b14611172575081630fb5a6b41461115357816316fc4869146111345781632129e25a1461111557816324600fc314610de957816326c2596214610da15781632bc3d7aa14610d62578163373058b814610abf5781633f3b3b2714610aa0578163400e394914610a815781634a79d50c146109df5781634abfa1631461099e578163671b37931461097f5781637284e416146108975781638da5cb5b1461086e578163953b8fb81461084f5781639d76ea5814610826578163a78b17cc14610807578163c255343e146107de578163cc6cb19a146107a4578163de2ed89314610786578163e3ccb80914610444578163ec752dcb14610425578163ed88c68e1461015e575063f1ead2521461013857600080fd5b3461015a578160031936011261015a5760209060ff600d541690519015158152f35b5080fd5b83838160031936011261015a5734156103d15760035490811561037f57600f5481516318160ddd60e01b81526020936001600160a01b03928316929185818981875afa908115610375579186918893849161033b575b50906101c36101c89234611363565b611376565b93604486518094819363a9059cbb60e01b8352338d8401528860248401525af18015610331576102f6575b5033855260108452828520610209348254611340565b90553385526011845260ff83862054161561026f575b507f4b0304ab2f313234b1cea012339c8f8c3bf2c8bb357d81a579cfdb35d2e3d03092939461024f348254611340565b905561025d81600554611340565b6005558151933485528401523392a280f35b601254600160401b8110156102e357906102b38260017f4b0304ab2f313234b1cea012339c8f8c3bf2c8bb357d81a579cfdb35d2e3d0309798999401601255611325565b819291549060031b9133831b921b191617905533865260118552828620600160ff1982541617905594939261021f565b634e487b7160e01b865260418752602486fd5b8481813d831161032a575b61030b81836112bb565b8101031261032657518015150361032257866101f3565b8480fd5b8580fd5b503d610301565b84513d88823e3d90fd5b9350509082813d831161036e575b61035381836112bb565b81010312610369579051869186916101c36101b4565b600080fd5b503d610349565b85513d89823e3d90fd5b5162461bcd60e51b8152602081850152602760248201527f54617267657420616d6f756e74206d7573742062652067726561746572207468604482015266616e207a65726f60c81b6064820152608490fd5b5162461bcd60e51b8152602081840152602960248201527f446f6e6174696f6e20616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608490fd5b50503461015a578160031936011261015a57602090600c549051908152f35b91905034610782576020908160031936011261077e578235918215159283810361032657601454600019959086810190811161076b578752601383528387209160ff60038401541661072c5782546001600160a01b039390841633146106eb5783600f5416908651946370a0823160e01b92838752338688015260249688818981855afa9081156106e1578d916106b4575b50156106745760058301943360005285895260ff8a60002054166106425788929190156105da5750600f54169286895180958193825233898301525afa9182156105d0578a926105a0575b5060016105319101918254611340565b90555b33600052835283600020600160ff1982541617905560145495860195861161058f57867f0def80f9a3b4c7a4251442658ccf516bf33ea4acaf31638fc6da8ebdb0f64c7260608888888881519384523390840152820152a180f35b634e487b7160e01b87526011905285fd5b9091508581813d83116105c9575b6105b881836112bb565b810103126103695751906001610521565b503d6105ae565b87513d8c823e3d90fd5b93905086895180958193825233898301525afa9182156105d0578a92610612575b50600261060b9101918254611340565b9055610534565b9091508581813d831161063b575b61062a81836112bb565b8101031261036957519060026105fb565b503d610620565b895162461bcd60e51b81528088018a9052600d818a01526c105b1c9958591e481d9bdd1959609a1b6044820152606490fd5b885162461bcd60e51b8152808701899052601b818901527a496e73756666696369656e7420746f6b656e7320746f20766f746560281b6044820152606490fd5b90508881813d83116106da575b6106cb81836112bb565b810103126103695751386104d6565b503d6106c1565b8a513d8f823e3d90fd5b855162461bcd60e51b8152808401869052601b60248201527a10d85b9b9bdd081d9bdd19481bdb881bdddb881c1c9bdc1bdcd85b602a1b6044820152606490fd5b845162461bcd60e51b81528083018590526019602482015278141c9bdc1bdcd85b08185b1c9958591e48195e1958dd5d1959603a1b6044820152606490fd5b634e487b7160e01b885260118252602488fd5b8380fd5b8280fd5b90503461078257826003193601126107825760209250549051908152f35b90503461078257602036600319011261078257356001600160a01b0381169081900361078257828291602094526010845220549051908152f35b50503461015a578160031936011261015a5760025490516001600160a01b039091168152602090f35b50503461015a578160031936011261015a57602090600b549051908152f35b50503461015a578160031936011261015a57600f5490516001600160a01b039091168152602090f35b50503461015a578160031936011261015a576020906003549051908152f35b50503461015a578160031936011261015a5760085490516001600160a01b039091168152602090f35b82843461097c578060031936011261097c5750805190600092600180549081811c918181168015610972575b602094858510821461095f575083875290811561093f5750600114610903575b5050506108f5826108ff9403836112bb565b51918291826112dc565b0390f35b6000818152838120939650925b82841061092c57505050826108ff946108f592820101946108e3565b8054868501880152928601928101610910565b60ff1916868501525050151560051b83010192506108f5826108ff6108e3565b634e487b7160e01b895260229052602488fd5b92607f16926108c3565b80fd5b50503461015a578160031936011261015a576020906005549051908152f35b90503461078257602036600319011261078257359160125483101561097c57506109c9602092611325565b905491519160018060a01b039160031b1c168152f35b82843461097c578060031936011261097c57508051906000928354600181811c918181168015610a77575b602094858510821461095f575083875290811561093f5750600114610a3b575050506108f5826108ff9403836112bb565b6000808052838120939650925b828410610a6457505050826108ff946108f592820101946108e3565b8054868501880152928601928101610a48565b92607f1692610a0a565b50503461015a578160031936011261015a576020906014549051908152f35b50503461015a578160031936011261015a57602090600e549051908152f35b83833461015a578160031936011261015a5760145460001990818101908111610d4f5783526020601381528284206003908181019160ff83541615610b02578680f35b600580549260019360028583015492015490610b1e8284611340565b9081871b9180830460021490151715610d3c579086959493929111159182610d32575b505015610d2057845461ff0019168555600d805460ff19169055479089808a898e885b610bdf575b5050505050505050505b60ff1982541617809155601454928301928311610bcc577f948f4a9cd986f1118c3fbd459f7a22b23c0693e1ca3ef06a6a8be5aa7d39cc0394955060ff90845193845260081c16151590820152a1808280808080808680f35b634e487b7160e01b855260118652602485fd5b601254851015610d1b5782610bf386611325565b90546001600160a01b03918b1b1c8116808752601085529190952054909490610c2f575b5050505050610c2590611396565b8a8a898e88610b64565b8495969798995090602491600f959394955416945194859384926370a0823160e01b84528301525afa908115610d11578c91610ce2575b50610c74610c7c9186611363565b845490611376565b8b8183828215610cd9575b839283928392f115610ccf5791610c25917f3367befd2b2f39615cd79917c2153263c4af1d3945ec003e5d5bfc13a8d858338a89989796958e51908152a2908a898e38610c17565b8a513d8d823e3d90fd5b506108fc610c87565b90508881813d8311610d0a575b610cf981836112bb565b810103126103695751610c74610c66565b503d610cef565b8b513d8e823e3d90fd5b610b69565b505060ff19600d541617600d55610b73565b1190508b80610b41565b634e487b7160e01b8c5260118d5260248cfd5b634e487b7160e01b845260118552602484fd5b90503461078257602036600319011261078257356001600160a01b0381169081900361078257818360ff92602095526011855220541690519015158152f35b8391503461015a57602036600319011261015a57359060155482101561097c5750601560005260206000209060011b01600160ff825416910154825191151582526020820152f35b905034610782578260031936011261078257610e0a600a5460095490611340565b4211156110c557610e196111dd565b508360ff8092541615600014610ef45750600d541615610eb35750610e4960018060a01b03600854163314611408565b818080806064610e6a47806007556001610e616111dd565b50015490611363565b04610e736111dd565b50805460ff1916600117905542600e55818115610eaa575b3390f115610ea05750610e9c61145e565b5080f35b51903d90823e3d90fd5b506108fc610e8b565b6020606492519162461bcd60e51b8352820152601c60248201527b119d5b991cc81dda5d1a191c985dd85b081b9bdd08185b1b1bddd95960221b6044820152fd5b909182610eff611226565b505416610fe057610f1f610f18600e54600c5490611340565b42116113a5565b303b1561015a5781845180926306e60b1760e31b82528183305af18015610fd657610fc2575b5050600d5416610f53575080f35b610f6860018060a01b03600854163314611408565b610f70611226565b50805460ff1916600117905542600e55610f8861145e565b50818080806064610f9f6007546001610e61611226565b04818115610fb9575b3390f1610e9c5751903d90823e3d90fd5b506108fc610fa8565b610fcb90611292565b610782578238610f45565b84513d84823e3d90fd5b905081610feb61125c565b50541615610ffa575b50505080f35b61100c610f18600e54600c5490611340565b303b1561077e5783835180926306e60b1760e31b82528183305af180156110b8576110a5575b50600d5416611043575b8080610ff4565b61105860018060a01b03600854163314611408565b61106061125c565b50600160ff198254161790558180808060646110826007546001610e6161125c565b0481811561109c575b3390f161103c5751903d90823e3d90fd5b506108fc61108b565b6110b190939193611292565b9138611032565b50505051903d90823e3d90fd5b6020608492519162461bcd60e51b8352820152602560248201527f4f6e676f696e672043616d706169676e203a20796f752063616e277420776974604482015264686472617760d81b6064820152fd5b50503461015a578160031936011261015a576020906007549051908152f35b50503461015a578160031936011261015a576020906006549051908152f35b50503461015a578160031936011261015a576020906009549051908152f35b9291503461077e57602036600319011261077e57808260c09560ff933581526013602052209060018060a01b03825416936001830154600284015492600385015494015495875260208701528501528181161515606085015260081c161515608083015260a0820152f35b6015541561121057601560009081527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47591565b634e487b7160e01b600052603260045260246000fd5b6015546001101561121057601560009081527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47791565b6015546002101561121057601560009081527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47991565b6001600160401b0381116112a557604052565b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b038211176112a557604052565b6020808252825181830181905290939260005b82811061131157505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016112ef565b60125481101561121057601260005260206000200190600090565b9190820180921161134d57565b634e487b7160e01b600052601160045260246000fd5b8181029291811591840414171561134d57565b8115611380570490565b634e487b7160e01b600052601260045260246000fd5b600019811461134d5760010190565b156113ac57565b60405162461bcd60e51b815260206004820152602e60248201527f57616974207472616e636865206e6f7420756e6c6f636b6564203a20796f752060448201526d63616e277420776974686472617760901b6064820152608490fd5b1561140f57565b60405162461bcd60e51b815260206004820152602160248201527f4f6e6c7920746865206f776e65722063616e2077697468647261772066756e646044820152607360f81b6064820152608490fd5b60145461146a81611396565b601455600081815260136020526040902080546001600160a01b0319163017815560038101805461ff001916610100179055600b546004906114ac9042611340565b9101557fcd423cc1203c0af96b9b3d68d73b3064a69de2d14450bb7181c5e5df2132b35860408051838152336020820152a19056fea264697066735822122011aee0a5f2db0ab944142234e5942011115622873e76996753de069a6184440c64736f6c6343000814003360406080815262000c54803803806200001881620003e1565b9283398101606082820312620003dc57815191602091828201519160018060401b0392838111620003dc57826200005191830162000407565b9186820151848111620003dc576200006a920162000407565b918151818111620002dc576003908154906001948583811c93168015620003d1575b88841014620003bb578190601f9384811162000365575b508890848311600114620002fe57600092620002f2575b505060001982851b1c191690851b1782555b8451928311620002dc5760049485548581811c91168015620002d1575b88821014620002bc5782811162000271575b50869184116001146200020657938394918492600095620001fa575b50501b92600019911b1c19161781555b3315620001e35760058054336001600160a01b0319821681179092556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360025490838201809211620001ce57506000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9160025533835282815284832084815401905584519384523393a3516107da90816200047a8239f35b601190634e487b7160e01b6000525260246000fd5b6024906000855191631e4fbdf760e01b8352820152fd5b01519350388062000117565b9190601f198416928660005284886000209460005b8a898383106200025957505050106200023e575b50505050811b01815562000127565b01519060f884600019921b161c19169055388080806200022f565b8686015189559097019694850194889350016200021b565b86600052876000208380870160051c8201928a8810620002b2575b0160051c019086905b828110620002a5575050620000fb565b6000815501869062000295565b925081926200028c565b602287634e487b7160e01b6000525260246000fd5b90607f1690620000e9565b634e487b7160e01b600052604160045260246000fd5b015190503880620000ba565b90879350601f19831691866000528a6000209260005b8c8282106200034e575050841162000335575b505050811b018255620000cc565b015160001983871b60f8161c1916905538808062000327565b8385015186558b9790950194938401930162000314565b90915084600052886000208480850160051c8201928b8610620003b1575b918991869594930160051c01915b828110620003a1575050620000a3565b6000815585945089910162000391565b9250819262000383565b634e487b7160e01b600052602260045260246000fd5b92607f16926200008c565b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620002dc57604052565b919080601f84011215620003dc5782516001600160401b038111620002dc576020906200043d601f8201601f19168301620003e1565b92818452828287010111620003dc5760005b8181106200046557508260009394955001015290565b85810183015184820184015282016200044f56fe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde031461054057508063095ea7b31461049757806318160ddd1461047857806323b872dd1461038f578063313ce5671461037357806370a082311461033c578063715018a6146102dc5780638da5cb5b146102b357806395d89b41146101b1578063a9059cbb14610180578063dd62ed3e146101335763f2fde38b146100a757600080fd5b3461012f57602036600319011261012f576100c0610660565b906100c9610691565b6001600160a01b03918216928315610119575050600580546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b50503461017c578060031936011261017c5780602092610151610660565b61015961067b565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50503461017c578060031936011261017c576020906101aa6101a0610660565b60243590336106bd565b5160018152f35b5091903461017c578160031936011261017c57805190828454600181811c908083169283156102a9575b60209384841081146102965783885290811561027a5750600114610242575b505050829003601f01601f19168201926001600160401b0384118385101761022f575082918261022b925282610617565b0390f35b634e487b7160e01b815260418552602490fd5b919250868652828620918387935b83851061026657505050508301013880806101fa565b805488860183015293019284908201610250565b60ff1916878501525050151560051b84010190503880806101fa565b634e487b7160e01b895260228a52602489fd5b91607f16916101db565b50503461017c578160031936011261017c5760055490516001600160a01b039091168152602090f35b83346103395780600319360112610339576102f5610691565b600580546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b50503461017c57602036600319011261017c5760209181906001600160a01b03610364610660565b16815280845220549051908152f35b50503461017c578160031936011261017c576020905160128152f35b508234610339576060366003190112610339576103aa610660565b6103b261067b565b916044359360018060a01b0383168083526001602052868320338452602052868320549160001983036103ee575b6020886101aa8989896106bd565b86831061045657811561043f573315610428575082526001602090815286832033845281529186902090859003905582906101aa876103e0565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b9050610474868851938493637dc7a0d960e11b855233908501610786565b0390fd5b50503461017c578160031936011261017c576020906002549051908152f35b503461012f578160031936011261012f576104b0610660565b602435903315610529576001600160a01b031691821561051257508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b849150833461012f578260031936011261012f5782600354600181811c9080831692831561060d575b6020938484108114610296578388529081156105f157506001146105b857505050829003601f01601f19168201926001600160401b0384118385101761022f575082918261022b925282610617565b91925060038652828620918387935b8385106105dd57505050508301018580806101fa565b8054888601830152930192849082016105c7565b60ff1916878501525050151560051b84010190508580806101fa565b91607f1691610569565b6020808252825181830181905290939260005b82811061064c57505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161062a565b600435906001600160a01b038216820361067657565b600080fd5b602435906001600160a01b038216820361067657565b6005546001600160a01b031633036106a557565b60405163118cdaa760e01b8152336004820152602490fd5b916001600160a01b0380841692831561076d57169283156107545760009083825281602052604082205490838210610737575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b6104748460405193849363391434e360e21b855260048501610786565b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b604091949392606082019560018060a01b031682526020820152015256fea2646970667358221220322d83782e2d1215fb5abeb9785ab9735e22f5a4186ceeeda64e3a3ba9b70f1964736f6c63430008140033a2646970667358221220ddd71c8fa88624aaf1679d4f1ffa46cd49796690bcc730eda788dba4e9b75ff764736f6c63430008140033",
  "deployedBytecode": "0x60806040908082526004803610156200001757600080fd5b600091823560e01c9081637a8c719514620002ef575063f4690f08146200003d57600080fd5b34620002eb57610100366003190112620002eb576001600160401b03928135848111620002e7576200007390369084016200034d565b936024948535828111620002e3576200009090369086016200034d565b916044359460018060a01b03808716809703620002b35760a4359460c435848111620002df57620000c590369085016200034d565b9760e435858111620002db57620000e090369086016200034d565b98885190610c54908183019183831089841117620002bf579a809c84936200012762000134948e9f9e60609e9f62001e658939835260209d8e8401526060830190620003ad565b92818403910152620003ad565b03908bf08015620002d157831696895192611a75918285019285841089851117620002bf57926200018d8b936200017f60c094899897620003f08a3960e0855260e0850190620003ad565b908382038d850152620003ad565b938d820152606435606082015260843560808201523360a08201520152039089f080156200027357169486519063a9059cbb60e01b825286838301528982015283816044818b895af18015620002735762000281575b50833b156200027d57855163f2fde38b60e01b81528181018690529187838a8183895af18015620002735762000247575b5050507f6056366dba45431fd6a8854ad9f2594942b02c4f2c3f6fbc329b3079b027b8b49495508351928352820152a180f35b829793971162000261575084529394508438808062000214565b634e487b7160e01b8352604190528682fd5b87513d8a823e3d90fd5b8680fd5b8381813d8311620002b7575b62000299818362000315565b81010312620002b35751801515036200027d5738620001e3565b8780fd5b503d6200028d565b634e487b7160e01b8e52604188528e8efd5b89513d8c823e3d90fd5b8a80fd5b8980fd5b8580fd5b8380fd5b5080fd5b839034620002eb5781600319360112620002eb5790546001600160a01b03168152602090f35b90601f801991011681019081106001600160401b038211176200033757604052565b634e487b7160e01b600052604160045260246000fd5b81601f82011215620003a8578035906001600160401b03821162000337576040519262000385601f8401601f19166020018562000315565b82845260208383010111620003a857816000926020809301838601378301015290565b600080fd5b919082519283825260005b848110620003da575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201620003b856fe608060405234620004265762001a75803803806200001d816200044b565b928339810160e082820312620004265781516001600160401b0391908281116200042657816200004f91850162000471565b602091828501519084821162000426576200006c91860162000471565b936200007b60408201620004e3565b90606081015190608081015191620000a460c06200009c60a08501620004e3565b9301620004e3565b9160786009556078600b556078600c5585519780891162000410576000988954976001988981811c9116801562000405575b8b821014620003f1579180918b8d94601f809681831162000396575b92505050508b908d85841160011462000330579262000324575b5050600019600383901b1c191690891b178a555b8a51918211620003105787548881811c9116801562000305575b8a821014620002f157818111620002a9575b508890821160011462000239579080603299989796959493926200021d9c8c926200022d575b5050600019600383901b1c191690871b1786555b60018060a01b039384928360018060a01b03199716876002541617600255600355600655168360085416176008551690600f541617600f5542600a5560ff19600d541617600d55620001ea620001db6200042b565b848152601483820152620004f8565b62000207620001f86200042b565b848152601e83820152620004f8565b620002116200042b565b928352820152620004f8565b60405161151790816200055e8239f35b01519050388062000172565b878a52888a2090601f1983168b5b8181106200029357509183916200021d9d8b9a999897969560329d9c951062000279575b505050811b01865562000186565b015160001960f88460031b161c191690553880806200026b565b8d8301518455928a0192918b01918b0162000247565b888b52898b208280850160051c8201928c8610620002e7575b0160051c019089905b828110620002db5750506200014c565b8c8155018990620002cb565b92508192620002c2565b634e487b7160e01b8b52602260045260248bfd5b90607f16906200013a565b634e487b7160e01b8a52604160045260248afd5b0151905038806200010c565b8080528d81208d9550929190601f198516908f5b8282106200037e575050841162000364575b505050811b018a5562000120565b015160001960f88460031b161c1916905538808062000356565b8385015186558f979095019493840193018f62000344565b8394955080809492939452209181860160051c8301938610620003e7575b859493910160051c909101908c908f5b838210620003d8578f9350879150620000f2565b81558594508d91018f620003c4565b92508192620003b4565b634e487b7160e01b8c52602260045260248cfd5b90607f1690620000d6565b634e487b7160e01b600052604160045260246000fd5b600080fd5b60408051919082016001600160401b038111838210176200041057604052565b6040519190601f01601f191682016001600160401b038111838210176200041057604052565b919080601f84011215620004265782516001600160401b0381116200041057602090620004a7601f8201601f191683016200044b565b92818452828287010111620004265760005b818110620004cf57508260009394955001015290565b8581018301518482018401528201620004b9565b51906001600160a01b03821682036200042657565b60155468010000000000000000811015620004105760018101806015558110156200054757602060019160156000528160002090831b01928051151560ff801986541691161784550151910155565b634e487b7160e01b600052603260045260246000fdfe608060408181526004918236101561001657600080fd5b600092833560e01c918263013cf08b14611172575081630fb5a6b41461115357816316fc4869146111345781632129e25a1461111557816324600fc314610de957816326c2596214610da15781632bc3d7aa14610d62578163373058b814610abf5781633f3b3b2714610aa0578163400e394914610a815781634a79d50c146109df5781634abfa1631461099e578163671b37931461097f5781637284e416146108975781638da5cb5b1461086e578163953b8fb81461084f5781639d76ea5814610826578163a78b17cc14610807578163c255343e146107de578163cc6cb19a146107a4578163de2ed89314610786578163e3ccb80914610444578163ec752dcb14610425578163ed88c68e1461015e575063f1ead2521461013857600080fd5b3461015a578160031936011261015a5760209060ff600d541690519015158152f35b5080fd5b83838160031936011261015a5734156103d15760035490811561037f57600f5481516318160ddd60e01b81526020936001600160a01b03928316929185818981875afa908115610375579186918893849161033b575b50906101c36101c89234611363565b611376565b93604486518094819363a9059cbb60e01b8352338d8401528860248401525af18015610331576102f6575b5033855260108452828520610209348254611340565b90553385526011845260ff83862054161561026f575b507f4b0304ab2f313234b1cea012339c8f8c3bf2c8bb357d81a579cfdb35d2e3d03092939461024f348254611340565b905561025d81600554611340565b6005558151933485528401523392a280f35b601254600160401b8110156102e357906102b38260017f4b0304ab2f313234b1cea012339c8f8c3bf2c8bb357d81a579cfdb35d2e3d0309798999401601255611325565b819291549060031b9133831b921b191617905533865260118552828620600160ff1982541617905594939261021f565b634e487b7160e01b865260418752602486fd5b8481813d831161032a575b61030b81836112bb565b8101031261032657518015150361032257866101f3565b8480fd5b8580fd5b503d610301565b84513d88823e3d90fd5b9350509082813d831161036e575b61035381836112bb565b81010312610369579051869186916101c36101b4565b600080fd5b503d610349565b85513d89823e3d90fd5b5162461bcd60e51b8152602081850152602760248201527f54617267657420616d6f756e74206d7573742062652067726561746572207468604482015266616e207a65726f60c81b6064820152608490fd5b5162461bcd60e51b8152602081840152602960248201527f446f6e6174696f6e20616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608490fd5b50503461015a578160031936011261015a57602090600c549051908152f35b91905034610782576020908160031936011261077e578235918215159283810361032657601454600019959086810190811161076b578752601383528387209160ff60038401541661072c5782546001600160a01b039390841633146106eb5783600f5416908651946370a0823160e01b92838752338688015260249688818981855afa9081156106e1578d916106b4575b50156106745760058301943360005285895260ff8a60002054166106425788929190156105da5750600f54169286895180958193825233898301525afa9182156105d0578a926105a0575b5060016105319101918254611340565b90555b33600052835283600020600160ff1982541617905560145495860195861161058f57867f0def80f9a3b4c7a4251442658ccf516bf33ea4acaf31638fc6da8ebdb0f64c7260608888888881519384523390840152820152a180f35b634e487b7160e01b87526011905285fd5b9091508581813d83116105c9575b6105b881836112bb565b810103126103695751906001610521565b503d6105ae565b87513d8c823e3d90fd5b93905086895180958193825233898301525afa9182156105d0578a92610612575b50600261060b9101918254611340565b9055610534565b9091508581813d831161063b575b61062a81836112bb565b8101031261036957519060026105fb565b503d610620565b895162461bcd60e51b81528088018a9052600d818a01526c105b1c9958591e481d9bdd1959609a1b6044820152606490fd5b885162461bcd60e51b8152808701899052601b818901527a496e73756666696369656e7420746f6b656e7320746f20766f746560281b6044820152606490fd5b90508881813d83116106da575b6106cb81836112bb565b810103126103695751386104d6565b503d6106c1565b8a513d8f823e3d90fd5b855162461bcd60e51b8152808401869052601b60248201527a10d85b9b9bdd081d9bdd19481bdb881bdddb881c1c9bdc1bdcd85b602a1b6044820152606490fd5b845162461bcd60e51b81528083018590526019602482015278141c9bdc1bdcd85b08185b1c9958591e48195e1958dd5d1959603a1b6044820152606490fd5b634e487b7160e01b885260118252602488fd5b8380fd5b8280fd5b90503461078257826003193601126107825760209250549051908152f35b90503461078257602036600319011261078257356001600160a01b0381169081900361078257828291602094526010845220549051908152f35b50503461015a578160031936011261015a5760025490516001600160a01b039091168152602090f35b50503461015a578160031936011261015a57602090600b549051908152f35b50503461015a578160031936011261015a57600f5490516001600160a01b039091168152602090f35b50503461015a578160031936011261015a576020906003549051908152f35b50503461015a578160031936011261015a5760085490516001600160a01b039091168152602090f35b82843461097c578060031936011261097c5750805190600092600180549081811c918181168015610972575b602094858510821461095f575083875290811561093f5750600114610903575b5050506108f5826108ff9403836112bb565b51918291826112dc565b0390f35b6000818152838120939650925b82841061092c57505050826108ff946108f592820101946108e3565b8054868501880152928601928101610910565b60ff1916868501525050151560051b83010192506108f5826108ff6108e3565b634e487b7160e01b895260229052602488fd5b92607f16926108c3565b80fd5b50503461015a578160031936011261015a576020906005549051908152f35b90503461078257602036600319011261078257359160125483101561097c57506109c9602092611325565b905491519160018060a01b039160031b1c168152f35b82843461097c578060031936011261097c57508051906000928354600181811c918181168015610a77575b602094858510821461095f575083875290811561093f5750600114610a3b575050506108f5826108ff9403836112bb565b6000808052838120939650925b828410610a6457505050826108ff946108f592820101946108e3565b8054868501880152928601928101610a48565b92607f1692610a0a565b50503461015a578160031936011261015a576020906014549051908152f35b50503461015a578160031936011261015a57602090600e549051908152f35b83833461015a578160031936011261015a5760145460001990818101908111610d4f5783526020601381528284206003908181019160ff83541615610b02578680f35b600580549260019360028583015492015490610b1e8284611340565b9081871b9180830460021490151715610d3c579086959493929111159182610d32575b505015610d2057845461ff0019168555600d805460ff19169055479089808a898e885b610bdf575b5050505050505050505b60ff1982541617809155601454928301928311610bcc577f948f4a9cd986f1118c3fbd459f7a22b23c0693e1ca3ef06a6a8be5aa7d39cc0394955060ff90845193845260081c16151590820152a1808280808080808680f35b634e487b7160e01b855260118652602485fd5b601254851015610d1b5782610bf386611325565b90546001600160a01b03918b1b1c8116808752601085529190952054909490610c2f575b5050505050610c2590611396565b8a8a898e88610b64565b8495969798995090602491600f959394955416945194859384926370a0823160e01b84528301525afa908115610d11578c91610ce2575b50610c74610c7c9186611363565b845490611376565b8b8183828215610cd9575b839283928392f115610ccf5791610c25917f3367befd2b2f39615cd79917c2153263c4af1d3945ec003e5d5bfc13a8d858338a89989796958e51908152a2908a898e38610c17565b8a513d8d823e3d90fd5b506108fc610c87565b90508881813d8311610d0a575b610cf981836112bb565b810103126103695751610c74610c66565b503d610cef565b8b513d8e823e3d90fd5b610b69565b505060ff19600d541617600d55610b73565b1190508b80610b41565b634e487b7160e01b8c5260118d5260248cfd5b634e487b7160e01b845260118552602484fd5b90503461078257602036600319011261078257356001600160a01b0381169081900361078257818360ff92602095526011855220541690519015158152f35b8391503461015a57602036600319011261015a57359060155482101561097c5750601560005260206000209060011b01600160ff825416910154825191151582526020820152f35b905034610782578260031936011261078257610e0a600a5460095490611340565b4211156110c557610e196111dd565b508360ff8092541615600014610ef45750600d541615610eb35750610e4960018060a01b03600854163314611408565b818080806064610e6a47806007556001610e616111dd565b50015490611363565b04610e736111dd565b50805460ff1916600117905542600e55818115610eaa575b3390f115610ea05750610e9c61145e565b5080f35b51903d90823e3d90fd5b506108fc610e8b565b6020606492519162461bcd60e51b8352820152601c60248201527b119d5b991cc81dda5d1a191c985dd85b081b9bdd08185b1b1bddd95960221b6044820152fd5b909182610eff611226565b505416610fe057610f1f610f18600e54600c5490611340565b42116113a5565b303b1561015a5781845180926306e60b1760e31b82528183305af18015610fd657610fc2575b5050600d5416610f53575080f35b610f6860018060a01b03600854163314611408565b610f70611226565b50805460ff1916600117905542600e55610f8861145e565b50818080806064610f9f6007546001610e61611226565b04818115610fb9575b3390f1610e9c5751903d90823e3d90fd5b506108fc610fa8565b610fcb90611292565b610782578238610f45565b84513d84823e3d90fd5b905081610feb61125c565b50541615610ffa575b50505080f35b61100c610f18600e54600c5490611340565b303b1561077e5783835180926306e60b1760e31b82528183305af180156110b8576110a5575b50600d5416611043575b8080610ff4565b61105860018060a01b03600854163314611408565b61106061125c565b50600160ff198254161790558180808060646110826007546001610e6161125c565b0481811561109c575b3390f161103c5751903d90823e3d90fd5b506108fc61108b565b6110b190939193611292565b9138611032565b50505051903d90823e3d90fd5b6020608492519162461bcd60e51b8352820152602560248201527f4f6e676f696e672043616d706169676e203a20796f752063616e277420776974604482015264686472617760d81b6064820152fd5b50503461015a578160031936011261015a576020906007549051908152f35b50503461015a578160031936011261015a576020906006549051908152f35b50503461015a578160031936011261015a576020906009549051908152f35b9291503461077e57602036600319011261077e57808260c09560ff933581526013602052209060018060a01b03825416936001830154600284015492600385015494015495875260208701528501528181161515606085015260081c161515608083015260a0820152f35b6015541561121057601560009081527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47591565b634e487b7160e01b600052603260045260246000fd5b6015546001101561121057601560009081527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47791565b6015546002101561121057601560009081527f55f448fdea98c4d29eb340757ef0a66cd03dbb9538908a6a81d96026b71ec47991565b6001600160401b0381116112a557604052565b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b038211176112a557604052565b6020808252825181830181905290939260005b82811061131157505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016112ef565b60125481101561121057601260005260206000200190600090565b9190820180921161134d57565b634e487b7160e01b600052601160045260246000fd5b8181029291811591840414171561134d57565b8115611380570490565b634e487b7160e01b600052601260045260246000fd5b600019811461134d5760010190565b156113ac57565b60405162461bcd60e51b815260206004820152602e60248201527f57616974207472616e636865206e6f7420756e6c6f636b6564203a20796f752060448201526d63616e277420776974686472617760901b6064820152608490fd5b1561140f57565b60405162461bcd60e51b815260206004820152602160248201527f4f6e6c7920746865206f776e65722063616e2077697468647261772066756e646044820152607360f81b6064820152608490fd5b60145461146a81611396565b601455600081815260136020526040902080546001600160a01b0319163017815560038101805461ff001916610100179055600b546004906114ac9042611340565b9101557fcd423cc1203c0af96b9b3d68d73b3064a69de2d14450bb7181c5e5df2132b35860408051838152336020820152a19056fea264697066735822122011aee0a5f2db0ab944142234e5942011115622873e76996753de069a6184440c64736f6c6343000814003360406080815262000c54803803806200001881620003e1565b9283398101606082820312620003dc57815191602091828201519160018060401b0392838111620003dc57826200005191830162000407565b9186820151848111620003dc576200006a920162000407565b918151818111620002dc576003908154906001948583811c93168015620003d1575b88841014620003bb578190601f9384811162000365575b508890848311600114620002fe57600092620002f2575b505060001982851b1c191690851b1782555b8451928311620002dc5760049485548581811c91168015620002d1575b88821014620002bc5782811162000271575b50869184116001146200020657938394918492600095620001fa575b50501b92600019911b1c19161781555b3315620001e35760058054336001600160a01b0319821681179092556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360025490838201809211620001ce57506000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9160025533835282815284832084815401905584519384523393a3516107da90816200047a8239f35b601190634e487b7160e01b6000525260246000fd5b6024906000855191631e4fbdf760e01b8352820152fd5b01519350388062000117565b9190601f198416928660005284886000209460005b8a898383106200025957505050106200023e575b50505050811b01815562000127565b01519060f884600019921b161c19169055388080806200022f565b8686015189559097019694850194889350016200021b565b86600052876000208380870160051c8201928a8810620002b2575b0160051c019086905b828110620002a5575050620000fb565b6000815501869062000295565b925081926200028c565b602287634e487b7160e01b6000525260246000fd5b90607f1690620000e9565b634e487b7160e01b600052604160045260246000fd5b015190503880620000ba565b90879350601f19831691866000528a6000209260005b8c8282106200034e575050841162000335575b505050811b018255620000cc565b015160001983871b60f8161c1916905538808062000327565b8385015186558b9790950194938401930162000314565b90915084600052886000208480850160051c8201928b8610620003b1575b918991869594930160051c01915b828110620003a1575050620000a3565b6000815585945089910162000391565b9250819262000383565b634e487b7160e01b600052602260045260246000fd5b92607f16926200008c565b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620002dc57604052565b919080601f84011215620003dc5782516001600160401b038111620002dc576020906200043d601f8201601f19168301620003e1565b92818452828287010111620003dc5760005b8181106200046557508260009394955001015290565b85810183015184820184015282016200044f56fe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde031461054057508063095ea7b31461049757806318160ddd1461047857806323b872dd1461038f578063313ce5671461037357806370a082311461033c578063715018a6146102dc5780638da5cb5b146102b357806395d89b41146101b1578063a9059cbb14610180578063dd62ed3e146101335763f2fde38b146100a757600080fd5b3461012f57602036600319011261012f576100c0610660565b906100c9610691565b6001600160a01b03918216928315610119575050600580546001600160a01b031981168417909155167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b50503461017c578060031936011261017c5780602092610151610660565b61015961067b565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50503461017c578060031936011261017c576020906101aa6101a0610660565b60243590336106bd565b5160018152f35b5091903461017c578160031936011261017c57805190828454600181811c908083169283156102a9575b60209384841081146102965783885290811561027a5750600114610242575b505050829003601f01601f19168201926001600160401b0384118385101761022f575082918261022b925282610617565b0390f35b634e487b7160e01b815260418552602490fd5b919250868652828620918387935b83851061026657505050508301013880806101fa565b805488860183015293019284908201610250565b60ff1916878501525050151560051b84010190503880806101fa565b634e487b7160e01b895260228a52602489fd5b91607f16916101db565b50503461017c578160031936011261017c5760055490516001600160a01b039091168152602090f35b83346103395780600319360112610339576102f5610691565b600580546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b50503461017c57602036600319011261017c5760209181906001600160a01b03610364610660565b16815280845220549051908152f35b50503461017c578160031936011261017c576020905160128152f35b508234610339576060366003190112610339576103aa610660565b6103b261067b565b916044359360018060a01b0383168083526001602052868320338452602052868320549160001983036103ee575b6020886101aa8989896106bd565b86831061045657811561043f573315610428575082526001602090815286832033845281529186902090859003905582906101aa876103e0565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b9050610474868851938493637dc7a0d960e11b855233908501610786565b0390fd5b50503461017c578160031936011261017c576020906002549051908152f35b503461012f578160031936011261012f576104b0610660565b602435903315610529576001600160a01b031691821561051257508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b849150833461012f578260031936011261012f5782600354600181811c9080831692831561060d575b6020938484108114610296578388529081156105f157506001146105b857505050829003601f01601f19168201926001600160401b0384118385101761022f575082918261022b925282610617565b91925060038652828620918387935b8385106105dd57505050508301018580806101fa565b8054888601830152930192849082016105c7565b60ff1916878501525050151560051b84010190508580806101fa565b91607f1691610569565b6020808252825181830181905290939260005b82811061064c57505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161062a565b600435906001600160a01b038216820361067657565b600080fd5b602435906001600160a01b038216820361067657565b6005546001600160a01b031633036106a557565b60405163118cdaa760e01b8152336004820152602490fd5b916001600160a01b0380841692831561076d57169283156107545760009083825281602052604082205490838210610737575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b6104748460405193849363391434e360e21b855260048501610786565b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b604091949392606082019560018060a01b031682526020820152015256fea2646970667358221220322d83782e2d1215fb5abeb9785ab9735e22f5a4186ceeeda64e3a3ba9b70f1964736f6c63430008140033a2646970667358221220ddd71c8fa88624aaf1679d4f1ffa46cd49796690bcc730eda788dba4e9b75ff764736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2290,
        "contract": "src/services/blockchain/contracts/Campaign/CharityCampaignFactoryDAO.sol:CharityCampaignFactoryDAO",
        "label": "associationFactory",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AssociationFactory)1478"
      }
    ],
    "types": {
      "t_contract(AssociationFactory)1478": {
        "encoding": "inplace",
        "label": "contract AssociationFactory",
        "numberOfBytes": "20"
      }
    }
  }
}